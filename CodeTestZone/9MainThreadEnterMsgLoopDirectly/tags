!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD_MESSAGE	MessageIDTable.h	8;"	d
CAddMessage	test.cpp	/^	CAddMessage(int op1, int op2):CMessage(ADD_MESSAGE)$/;"	f	class:CAddMessage	access:public	signature:(int op1, int op2)
CAddMessage	test.cpp	/^class CAddMessage : public CMessage$/;"	c	file:	inherits:CMessage
CAddMessage::CAddMessage	test.cpp	/^	CAddMessage(int op1, int op2):CMessage(ADD_MESSAGE)$/;"	f	class:CAddMessage	access:public	signature:(int op1, int op2)
CAddMessage::m_op1	test.cpp	/^	int m_op1;$/;"	m	class:CAddMessage	file:	access:public
CAddMessage::m_op2	test.cpp	/^	int m_op2;$/;"	m	class:CAddMessage	file:	access:public
CCLIENTBUSINESSFOREXECUTIVE_H	IUsrBizForExecObj.h	4;"	d
CCLIENTBUSINESSUSINGMSGLOOP_H	CUsrBizUsingMsgLoop.h	5;"	d
CCOMMUNICATEBYMESSAGEQUEUE_H	CCommunicationByMsgQueue.h	4;"	d
CCOMMUNICATIONNAMESERVER_H	CCommunicationNameServer.h	4;"	d
CCONDITIONVARIABLE_H	CConditionVariable.h	5;"	d
CCommunicationByMsgQueue	CCommunicationByMsgQueue.cpp	/^CCommunicationByMsgQueue:: CCommunicationByMsgQueue(CUsrDefMsgQueue * pMsgQueue)$/;"	f	class:CCommunicationByMsgQueue	signature:(CUsrDefMsgQueue * pMsgQueue)
CCommunicationByMsgQueue	CCommunicationByMsgQueue.h	/^	CCommunicationByMsgQueue(CUsrDefMsgQueue * pMsgQueue);$/;"	p	class:CCommunicationByMsgQueue	access:public	signature:(CUsrDefMsgQueue * pMsgQueue)
CCommunicationByMsgQueue	CCommunicationByMsgQueue.h	/^class CCommunicationByMsgQueue : public ICommunicationObject $/;"	c	inherits:ICommunicationObject
CCommunicationByMsgQueue::CCommunicationByMsgQueue	CCommunicationByMsgQueue.cpp	/^CCommunicationByMsgQueue:: CCommunicationByMsgQueue(CUsrDefMsgQueue * pMsgQueue)$/;"	f	class:CCommunicationByMsgQueue	signature:(CUsrDefMsgQueue * pMsgQueue)
CCommunicationByMsgQueue::CCommunicationByMsgQueue	CCommunicationByMsgQueue.h	/^	CCommunicationByMsgQueue(CUsrDefMsgQueue * pMsgQueue);$/;"	p	class:CCommunicationByMsgQueue	access:public	signature:(CUsrDefMsgQueue * pMsgQueue)
CCommunicationByMsgQueue::PostMessage	CCommunicationByMsgQueue.cpp	/^CStatus CCommunicationByMsgQueue:: PostMessage(CMessage * pMsg)$/;"	f	class:CCommunicationByMsgQueue	signature:(CMessage * pMsg)
CCommunicationByMsgQueue::PostMessage	CCommunicationByMsgQueue.h	/^	virtual CStatus PostMessage(CMessage * pMsg);$/;"	p	class:CCommunicationByMsgQueue	access:public	signature:(CMessage * pMsg)
CCommunicationByMsgQueue::m_pMsgQueue	CCommunicationByMsgQueue.h	/^	CUsrDefMsgQueue * m_pMsgQueue;$/;"	m	class:CCommunicationByMsgQueue	access:private
CCommunicationByMsgQueue::~CCommunicationByMsgQueue	CCommunicationByMsgQueue.cpp	/^CCommunicationByMsgQueue:: ~CCommunicationByMsgQueue()$/;"	f	class:CCommunicationByMsgQueue	signature:()
CCommunicationByMsgQueue::~CCommunicationByMsgQueue	CCommunicationByMsgQueue.h	/^	virtual ~CCommunicationByMsgQueue();$/;"	p	class:CCommunicationByMsgQueue	access:public	signature:()
CCommunicationNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer:: 	CCommunicationNameServer()$/;"	f	class:CCommunicationNameServer	signature:()
CCommunicationNameServer	CCommunicationNameServer.h	/^	CCommunicationNameServer();$/;"	p	class:CCommunicationNameServer	access:private	signature:()
CCommunicationNameServer	CCommunicationNameServer.h	/^class CCommunicationNameServer$/;"	c
CCommunicationNameServer::CCommunicationNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer:: 	CCommunicationNameServer()$/;"	f	class:CCommunicationNameServer	signature:()
CCommunicationNameServer::CCommunicationNameServer	CCommunicationNameServer.h	/^	CCommunicationNameServer();$/;"	p	class:CCommunicationNameServer	access:private	signature:()
CCommunicationNameServer::GetCommunicationObject	CCommunicationNameServer.cpp	/^ICommunicationObject * CCommunicationNameServer::GetCommunicationObject(const char * strCommObjName)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName)
CCommunicationNameServer::GetCommunicationObject	CCommunicationNameServer.h	/^	ICommunicationObject * GetCommunicationObject(const char * strCommObjName);$/;"	p	class:CCommunicationNameServer	access:public	signature:(const char * strCommObjName)
CCommunicationNameServer::GetInstance	CCommunicationNameServer.cpp	/^CCommunicationNameServer * CCommunicationNameServer:: GetInstance()$/;"	f	class:CCommunicationNameServer	signature:()
CCommunicationNameServer::GetInstance	CCommunicationNameServer.h	/^	static CCommunicationNameServer * GetInstance();$/;"	p	class:CCommunicationNameServer	access:public	signature:()
CCommunicationNameServer::Register	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer:: Register(const char * strCommObjName, ICommunicationObject * pCommObj)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName, ICommunicationObject * pCommObj)
CCommunicationNameServer::Register	CCommunicationNameServer.h	/^	CStatus Register(const char * strCommObjName,ICommunicationObject * pCommObj);$/;"	p	class:CCommunicationNameServer	access:public	signature:(const char * strCommObjName,ICommunicationObject * pCommObj)
CCommunicationNameServer::ReleaseCommunicationObject	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer::ReleaseCommunicationObject(const char * strCommObjName)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName)
CCommunicationNameServer::ReleaseCommunicationObject	CCommunicationNameServer.h	/^	CStatus ReleaseCommunicationObject(const char * strCommObjName);$/;"	p	class:CCommunicationNameServer	access:public	signature:(const char * strCommObjName)
CCommunicationNameServer::SendMessage	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer::SendMessage(const char * strCommObjName, CMessage * pMessage)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName, CMessage * pMessage)
CCommunicationNameServer::SendMessage	CCommunicationNameServer.h	/^	static CStatus SendMessage(const char * strCommObjName, CMessage * pMessage);$/;"	p	class:CCommunicationNameServer	access:public	signature:(const char * strCommObjName, CMessage * pMessage)
CCommunicationNameServer::m_MutexForCreatingInstance	CCommunicationNameServer.cpp	/^CMutex CCommunicationNameServer::m_MutexForCreatingInstance;$/;"	m	class:CCommunicationNameServer	file:
CCommunicationNameServer::m_MutexForCreatingInstance	CCommunicationNameServer.h	/^	static CMutex  m_MutexForCreatingInstance;$/;"	m	class:CCommunicationNameServer	access:private
CCommunicationNameServer::m_MutexForNameTable	CCommunicationNameServer.h	/^	CMutex m_MutexForNameTable;$/;"	m	class:CCommunicationNameServer	access:private
CCommunicationNameServer::m_NameTable	CCommunicationNameServer.h	/^	std::map<std::string,SCommunicationPtrCount *> m_NameTable;$/;"	m	class:CCommunicationNameServer	access:private
CCommunicationNameServer::m_pNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer * CCommunicationNameServer::m_pNameServer = 0;$/;"	m	class:CCommunicationNameServer	file:
CCommunicationNameServer::m_pNameServer	CCommunicationNameServer.h	/^	static CCommunicationNameServer * m_pNameServer; 	$/;"	m	class:CCommunicationNameServer	access:private
CCommunicationNameServer::~CCommunicationNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer::~CCommunicationNameServer()$/;"	f	class:CCommunicationNameServer	signature:()
CCommunicationNameServer::~CCommunicationNameServer	CCommunicationNameServer.h	/^	~CCommunicationNameServer();$/;"	p	class:CCommunicationNameServer	access:private	signature:()
CConditionVariable	CConditionVariable.h	/^	CConditionVariable();$/;"	p	class:CConditionVariable	access:public	signature:()
CConditionVariable	CConditionVariable.h	/^class CConditionVariable$/;"	c
CConditionVariable	src/CConditionVariable.cpp	/^CConditionVariable::CConditionVariable()$/;"	f	class:CConditionVariable	signature:()
CConditionVariable::CConditionVariable	CConditionVariable.h	/^	CConditionVariable();$/;"	p	class:CConditionVariable	access:public	signature:()
CConditionVariable::CConditionVariable	src/CConditionVariable.cpp	/^CConditionVariable::CConditionVariable()$/;"	f	class:CConditionVariable	signature:()
CConditionVariable::Wait	CConditionVariable.h	/^	CStatus Wait(CMutex * pMutex);$/;"	p	class:CConditionVariable	access:public	signature:(CMutex * pMutex)
CConditionVariable::Wait	src/CConditionVariable.cpp	/^CStatus CConditionVariable::Wait(CMutex * pMutex)$/;"	f	class:CConditionVariable	signature:(CMutex * pMutex)
CConditionVariable::Wakeup	CConditionVariable.h	/^	CStatus Wakeup();$/;"	p	class:CConditionVariable	access:public	signature:()
CConditionVariable::Wakeup	src/CConditionVariable.cpp	/^CStatus CConditionVariable::Wakeup()$/;"	f	class:CConditionVariable	signature:()
CConditionVariable::WakeupAll	CConditionVariable.h	/^	CStatus WakeupAll();$/;"	p	class:CConditionVariable	access:public	signature:()
CConditionVariable::WakeupAll	src/CConditionVariable.cpp	/^CStatus CConditionVariable::WakeupAll()$/;"	f	class:CConditionVariable	signature:()
CConditionVariable::m_Cond	CConditionVariable.h	/^	pthread_cond_t m_Cond;$/;"	m	class:CConditionVariable	access:private
CConditionVariable::~CConditionVariable	CConditionVariable.h	/^	virtual ~CConditionVariable();$/;"	p	class:CConditionVariable	access:public	signature:()
CConditionVariable::~CConditionVariable	src/CConditionVariable.cpp	/^CConditionVariable::~CConditionVariable()$/;"	f	class:CConditionVariable	signature:()
CENTERCRITICALSECTION_H	CEnterCriticalSection.h	3;"	d
CEVENT_H	CEvent.h	3;"	d
CEXECUTIVE_H	CExecutiveObject.h	4;"	d
CEnterCriticalSection	CEnterCriticalSection.h	/^	CEnterCriticalSection(CMutex * m_pMutex);$/;"	p	class:CEnterCriticalSection	access:public	signature:(CMutex * m_pMutex)
CEnterCriticalSection	CEnterCriticalSection.h	/^class CEnterCriticalSection$/;"	c
CEnterCriticalSection	src/CEnterCriticalSection.cpp	/^CEnterCriticalSection::CEnterCriticalSection(CMutex * pMutex)$/;"	f	class:CEnterCriticalSection	signature:(CMutex * pMutex)
CEnterCriticalSection::CEnterCriticalSection	CEnterCriticalSection.h	/^	CEnterCriticalSection(CMutex * m_pMutex);$/;"	p	class:CEnterCriticalSection	access:public	signature:(CMutex * m_pMutex)
CEnterCriticalSection::CEnterCriticalSection	src/CEnterCriticalSection.cpp	/^CEnterCriticalSection::CEnterCriticalSection(CMutex * pMutex)$/;"	f	class:CEnterCriticalSection	signature:(CMutex * pMutex)
CEnterCriticalSection::m_pMutex	CEnterCriticalSection.h	/^	CMutex * m_pMutex;$/;"	m	class:CEnterCriticalSection	access:private
CEnterCriticalSection::~CEnterCriticalSection	CEnterCriticalSection.h	/^	virtual ~CEnterCriticalSection();$/;"	p	class:CEnterCriticalSection	access:public	signature:()
CEnterCriticalSection::~CEnterCriticalSection	src/CEnterCriticalSection.cpp	/^CEnterCriticalSection::~CEnterCriticalSection()$/;"	f	class:CEnterCriticalSection	signature:()
CEvent	CEvent.h	/^	CEvent();$/;"	p	class:CEvent	access:public	signature:()
CEvent	CEvent.h	/^class CEvent$/;"	c
CEvent	src/CEvent.cpp	/^CEvent::CEvent()$/;"	f	class:CEvent	signature:()
CEvent::CEvent	CEvent.h	/^	CEvent();$/;"	p	class:CEvent	access:public	signature:()
CEvent::CEvent	src/CEvent.cpp	/^CEvent::CEvent()$/;"	f	class:CEvent	signature:()
CEvent::Set	CEvent.h	/^	CStatus Set();$/;"	p	class:CEvent	access:public	signature:()
CEvent::Set	src/CEvent.cpp	/^CStatus CEvent::Set()$/;"	f	class:CEvent	signature:()
CEvent::UseAsRecordCondVar	CEvent.h	/^	CStatus UseAsRecordCondVar(bool b);$/;"	p	class:CEvent	access:public	signature:(bool b)
CEvent::UseAsRecordCondVar	src/CEvent.cpp	/^CStatus CEvent::UseAsRecordCondVar(bool b)$/;"	f	class:CEvent	signature:(bool b)
CEvent::Wait	CEvent.h	/^	CStatus Wait();$/;"	p	class:CEvent	access:public	signature:()
CEvent::Wait	src/CEvent.cpp	/^CStatus CEvent::Wait()$/;"	f	class:CEvent	signature:()
CEvent::m_Cond	CEvent.h	/^	CConditionVariable m_Cond;$/;"	m	class:CEvent	access:private
CEvent::m_Mutex	CEvent.h	/^	CMutex m_Mutex;$/;"	m	class:CEvent	access:private
CEvent::m_bIsRecordCondVar	CEvent.h	/^	bool m_bIsRecordCondVar;$/;"	m	class:CEvent	access:private
CEvent::m_iEventCounter	CEvent.h	/^	int  m_iEventCounter;$/;"	m	class:CEvent	access:private
CEvent::~CEvent	CEvent.h	/^	~CEvent();$/;"	p	class:CEvent	access:public	signature:()
CEvent::~CEvent	src/CEvent.cpp	/^CEvent::~CEvent()$/;"	f	class:CEvent	signature:()
CExecutiveObject	CExecutiveObject.cpp	/^CExecutiveObject::CExecutiveObject(CUsrBizForExecObj * pUsrBizForExecObj)$/;"	f	class:CExecutiveObject	signature:(CUsrBizForExecObj * pUsrBizForExecObj)
CExecutiveObject	CExecutiveObject.h	/^	explicit CExecutiveObject(CUsrBizForExecObj * pUsrBizForExecObj);$/;"	p	class:CExecutiveObject	access:public	signature:(CUsrBizForExecObj * pUsrBizForExecObj)
CExecutiveObject	CExecutiveObject.h	/^class CExecutiveObject$/;"	c
CExecutiveObject::CExecutiveObject	CExecutiveObject.cpp	/^CExecutiveObject::CExecutiveObject(CUsrBizForExecObj * pUsrBizForExecObj)$/;"	f	class:CExecutiveObject	signature:(CUsrBizForExecObj * pUsrBizForExecObj)
CExecutiveObject::CExecutiveObject	CExecutiveObject.h	/^	explicit CExecutiveObject(CUsrBizForExecObj * pUsrBizForExecObj);$/;"	p	class:CExecutiveObject	access:public	signature:(CUsrBizForExecObj * pUsrBizForExecObj)
CExecutiveObject::Run	CExecutiveObject.h	/^	virtual CStatus Run(void * pContext) = 0;$/;"	p	class:CExecutiveObject	access:public	signature:(void * pContext)
CExecutiveObject::WaitForDeath	CExecutiveObject.h	/^	virtual CStatus WaitForDeath() = 0;$/;"	p	class:CExecutiveObject	access:public	signature:()
CExecutiveObject::m_pUsrBizForExecObj	CExecutiveObject.h	/^	CUsrBizForExecObj * m_pUsrBizForExecObj;$/;"	m	class:CExecutiveObject	access:protected
CExecutiveObject::~CExecutiveObject	CExecutiveObject.cpp	/^CExecutiveObject::~CExecutiveObject()$/;"	f	class:CExecutiveObject	signature:()
CExecutiveObject::~CExecutiveObject	CExecutiveObject.h	/^	virtual ~CExecutiveObject();$/;"	p	class:CExecutiveObject	access:public	signature:()
CMESSAGELOOPMANAGER_H	CMsgLoopManager.h	3;"	d
CMESSAGEOBSERVER_H	CMsgObserver.h	4;"	d
CMESSAGEQUEUEBYUSERDEFINED_H	CUsrDefMsgQueue.h	3;"	d
CMESSAGE_H	CMessage.h	4;"	d
CMSGLOOPMGRFORUSERDEFINEDQUEUE_H	CMsgLoopMgrUsingUsrDefQueue.h	5;"	d
CMUTEX_H	CMutex.h	3;"	d
CMessage	CMessage.cpp	/^CMessage:: CMessage(const CMessage &cm):m_clMsgID(m_lMsgID)$/;"	f	class:CMessage	signature:(const CMessage &cm)
CMessage	CMessage.cpp	/^CMessage::CMessage(unsigned long lMsgID):m_clMsgID(m_lMsgID)$/;"	f	class:CMessage	signature:(unsigned long lMsgID)
CMessage	CMessage.h	/^	CMessage(const CMessage & cm);$/;"	p	class:CMessage	access:public	signature:(const CMessage & cm)
CMessage	CMessage.h	/^	CMessage(unsigned long lMsgID);$/;"	p	class:CMessage	access:public	signature:(unsigned long lMsgID)
CMessage	CMessage.h	/^class CMessage$/;"	c
CMessage::CMessage	CMessage.cpp	/^CMessage:: CMessage(const CMessage &cm):m_clMsgID(m_lMsgID)$/;"	f	class:CMessage	signature:(const CMessage &cm)
CMessage::CMessage	CMessage.cpp	/^CMessage::CMessage(unsigned long lMsgID):m_clMsgID(m_lMsgID)$/;"	f	class:CMessage	signature:(unsigned long lMsgID)
CMessage::CMessage	CMessage.h	/^	CMessage(const CMessage & cm);$/;"	p	class:CMessage	access:public	signature:(const CMessage & cm)
CMessage::CMessage	CMessage.h	/^	CMessage(unsigned long lMsgID);$/;"	p	class:CMessage	access:public	signature:(unsigned long lMsgID)
CMessage::m_clMsgID	CMessage.h	/^	const unsigned long & m_clMsgID;$/;"	m	class:CMessage	access:public
CMessage::m_lMsgID	CMessage.h	/^	unsigned long m_lMsgID;$/;"	m	class:CMessage	access:protected
CMessage::operator =	CMessage.h	/^	CMessage & operator=(const CMessage & cm);$/;"	p	class:CMessage	access:public	signature:(const CMessage & cm)
CMessage::~CMessage	CMessage.cpp	/^CMessage:: ~CMessage()$/;"	f	class:CMessage	signature:()
CMessage::~CMessage	CMessage.h	/^	virtual ~CMessage();$/;"	p	class:CMessage	access:public	signature:()
CMsgLoopManager	CMsgLoopManager.cpp	/^CMsgLoopManager:: CMsgLoopManager(CMsgObserver * pMsgObserver)$/;"	f	class:CMsgLoopManager	signature:(CMsgObserver * pMsgObserver)
CMsgLoopManager	CMsgLoopManager.h	/^	CMsgLoopManager(CMsgObserver * pMsgObserver);$/;"	p	class:CMsgLoopManager	access:public	signature:(CMsgObserver * pMsgObserver)
CMsgLoopManager	CMsgLoopManager.h	/^class CMsgLoopManager$/;"	c
CMsgLoopManager::CMsgLoopManager	CMsgLoopManager.cpp	/^CMsgLoopManager:: CMsgLoopManager(CMsgObserver * pMsgObserver)$/;"	f	class:CMsgLoopManager	signature:(CMsgObserver * pMsgObserver)
CMsgLoopManager::CMsgLoopManager	CMsgLoopManager.h	/^	CMsgLoopManager(CMsgObserver * pMsgObserver);$/;"	p	class:CMsgLoopManager	access:public	signature:(CMsgObserver * pMsgObserver)
CMsgLoopManager::DispatchMessage	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::DispatchMessage(CMessage * pMsg)$/;"	f	class:CMsgLoopManager	signature:(CMessage * pMsg)
CMsgLoopManager::DispatchMessage	CMsgLoopManager.h	/^	virtual CStatus DispatchMessage(CMessage * pMsg);$/;"	p	class:CMsgLoopManager	access:protected	signature:(CMessage * pMsg)
CMsgLoopManager::EnterMessageLoop	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::EnterMessageLoop(void * pContext)$/;"	f	class:CMsgLoopManager	signature:(void * pContext)
CMsgLoopManager::EnterMessageLoop	CMsgLoopManager.h	/^	virtual CStatus EnterMessageLoop(void * pContext);$/;"	p	class:CMsgLoopManager	access:public	signature:(void * pContext)
CMsgLoopManager::Initialize	CMsgLoopManager.h	/^	virtual CStatus Initialize()=0;$/;"	p	class:CMsgLoopManager	access:protected	signature:()
CMsgLoopManager::Register	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::Register(unsigned int iMsgTypeID, CallBackFunctionOfMsgObserver pFunction)$/;"	f	class:CMsgLoopManager	signature:(unsigned int iMsgTypeID, CallBackFunctionOfMsgObserver pFunction)
CMsgLoopManager::Register	CMsgLoopManager.h	/^	virtual CStatus Register(unsigned int iMsgTypeID,CallBackFunctionOfMsgObserver pFunction);$/;"	p	class:CMsgLoopManager	access:public	signature:(unsigned int iMsgTypeID,CallBackFunctionOfMsgObserver pFunction)
CMsgLoopManager::Uninitialize	CMsgLoopManager.h	/^	virtual CStatus Uninitialize()=0;$/;"	p	class:CMsgLoopManager	access:protected	signature:()
CMsgLoopManager::WaitForMessage	CMsgLoopManager.h	/^	virtual CMessage * WaitForMessage() = 0;$/;"	p	class:CMsgLoopManager	access:protected	signature:()
CMsgLoopManager::m_MsgFuncMappingTable	CMsgLoopManager.h	/^	std::map<unsigned int,CallBackFunctionOfMsgObserver> m_MsgFuncMappingTable;$/;"	m	class:CMsgLoopManager	access:protected
CMsgLoopManager::m_pMsgObserver	CMsgLoopManager.h	/^	CMsgObserver * m_pMsgObserver;$/;"	m	class:CMsgLoopManager	access:protected
CMsgLoopMgrUsingUsrDefQueue	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMsgLoopMgrUsingUsrDefQueue::CMsgLoopMgrUsingUsrDefQueue(const char * strThreadName, CMsgObserver *pMsgObserver):CMsgLoopManager(pMsgObserver)$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:(const char * strThreadName, CMsgObserver *pMsgObserver)
CMsgLoopMgrUsingUsrDefQueue	CMsgLoopMgrUsingUsrDefQueue.h	/^	CMsgLoopMgrUsingUsrDefQueue(const char * strThreadName,CMsgObserver * pMsgObserver);$/;"	p	class:CMsgLoopMgrUsingUsrDefQueue	access:public	signature:(const char * strThreadName,CMsgObserver * pMsgObserver)
CMsgLoopMgrUsingUsrDefQueue	CMsgLoopMgrUsingUsrDefQueue.h	/^class CMsgLoopMgrUsingUsrDefQueue : public CMsgLoopManager$/;"	c	inherits:CMsgLoopManager
CMsgLoopMgrUsingUsrDefQueue::CMsgLoopMgrUsingUsrDefQueue	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMsgLoopMgrUsingUsrDefQueue::CMsgLoopMgrUsingUsrDefQueue(const char * strThreadName, CMsgObserver *pMsgObserver):CMsgLoopManager(pMsgObserver)$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:(const char * strThreadName, CMsgObserver *pMsgObserver)
CMsgLoopMgrUsingUsrDefQueue::CMsgLoopMgrUsingUsrDefQueue	CMsgLoopMgrUsingUsrDefQueue.h	/^	CMsgLoopMgrUsingUsrDefQueue(const char * strThreadName,CMsgObserver * pMsgObserver);$/;"	p	class:CMsgLoopMgrUsingUsrDefQueue	access:public	signature:(const char * strThreadName,CMsgObserver * pMsgObserver)
CMsgLoopMgrUsingUsrDefQueue::Initialize	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CStatus CMsgLoopMgrUsingUsrDefQueue::Initialize()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
CMsgLoopMgrUsingUsrDefQueue::Initialize	CMsgLoopMgrUsingUsrDefQueue.h	/^	virtual CStatus Initialize();$/;"	p	class:CMsgLoopMgrUsingUsrDefQueue	access:public	signature:()
CMsgLoopMgrUsingUsrDefQueue::Uninitialize	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CStatus CMsgLoopMgrUsingUsrDefQueue:: Uninitialize()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
CMsgLoopMgrUsingUsrDefQueue::Uninitialize	CMsgLoopMgrUsingUsrDefQueue.h	/^	virtual CStatus Uninitialize();$/;"	p	class:CMsgLoopMgrUsingUsrDefQueue	access:public	signature:()
CMsgLoopMgrUsingUsrDefQueue::WaitForMessage	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMessage * CMsgLoopMgrUsingUsrDefQueue:: WaitForMessage()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
CMsgLoopMgrUsingUsrDefQueue::WaitForMessage	CMsgLoopMgrUsingUsrDefQueue.h	/^	virtual CMessage * WaitForMessage();$/;"	p	class:CMsgLoopMgrUsingUsrDefQueue	access:public	signature:()
CMsgLoopMgrUsingUsrDefQueue::m_pQueue	CMsgLoopMgrUsingUsrDefQueue.h	/^	CUsrDefMsgQueue * m_pQueue;$/;"	m	class:CMsgLoopMgrUsingUsrDefQueue	access:private
CMsgLoopMgrUsingUsrDefQueue::m_strThreadName	CMsgLoopMgrUsingUsrDefQueue.h	/^	std::string m_strThreadName;$/;"	m	class:CMsgLoopMgrUsingUsrDefQueue	access:private
CMsgObserver	CMsgObserver.cpp	/^CMsgObserver:: CMsgObserver()$/;"	f	class:CMsgObserver	signature:()
CMsgObserver	CMsgObserver.h	/^	CMsgObserver();$/;"	p	class:CMsgObserver	access:public	signature:()
CMsgObserver	CMsgObserver.h	/^class CMsgObserver$/;"	c
CMsgObserver::CMsgObserver	CMsgObserver.cpp	/^CMsgObserver:: CMsgObserver()$/;"	f	class:CMsgObserver	signature:()
CMsgObserver::CMsgObserver	CMsgObserver.h	/^	CMsgObserver();$/;"	p	class:CMsgObserver	access:public	signature:()
CMsgObserver::Initialize	CMsgObserver.h	/^	virtual CStatus Initialize(CMsgLoopManager * pMsgLoopMgr,void * pContext) =0;$/;"	p	class:CMsgObserver	access:public	signature:(CMsgLoopManager * pMsgLoopMgr,void * pContext)
CMsgObserver::~CMsgObserver	CMsgObserver.cpp	/^CMsgObserver:: ~CMsgObserver()$/;"	f	class:CMsgObserver	signature:()
CMsgObserver::~CMsgObserver	CMsgObserver.h	/^	virtual ~CMsgObserver();$/;"	p	class:CMsgObserver	access:public	signature:()
CMutex	CMutex.h	/^	CMutex();$/;"	p	class:CMutex	access:public	signature:()
CMutex	CMutex.h	/^class CMutex$/;"	c
CMutex	src/CMutex.cpp	/^CMutex::CMutex()$/;"	f	class:CMutex	signature:()
CMutex::CMutex	CMutex.h	/^	CMutex();$/;"	p	class:CMutex	access:public	signature:()
CMutex::CMutex	src/CMutex.cpp	/^CMutex::CMutex()$/;"	f	class:CMutex	signature:()
CMutex::Lock	CMutex.h	/^	CStatus Lock();$/;"	p	class:CMutex	access:public	signature:()
CMutex::Lock	src/CMutex.cpp	/^CStatus CMutex::Lock()$/;"	f	class:CMutex	signature:()
CMutex::Trylock	CMutex.h	/^	CStatus Trylock();$/;"	p	class:CMutex	access:public	signature:()
CMutex::Unlock	CMutex.h	/^	CStatus Unlock();$/;"	p	class:CMutex	access:public	signature:()
CMutex::Unlock	src/CMutex.cpp	/^CStatus CMutex::Unlock()$/;"	f	class:CMutex	signature:()
CMutex::m_Mutex	CMutex.h	/^	pthread_mutex_t m_Mutex;$/;"	m	class:CMutex	access:public
CMutex::~CMutex	CMutex.h	/^	virtual ~CMutex();$/;"	p	class:CMutex	access:public	signature:()
CMutex::~CMutex	src/CMutex.cpp	/^CMutex::~CMutex()$/;"	f	class:CMutex	signature:()
CMyMsgProcessor	test.cpp	/^class CMyMsgProcessor : public CMsgObserver$/;"	c	file:	inherits:CMsgObserver
CMyMsgProcessor::Initialize	test.cpp	/^	virtual CStatus Initialize(CMsgLoopManager * pMsgLoopMgr, void * pContext)$/;"	f	class:CMyMsgProcessor	access:public	signature:(CMsgLoopManager * pMsgLoopMgr, void * pContext)
CMyMsgProcessor::On_AddMsg	test.cpp	/^	CStatus On_AddMsg(CMessage * pMsg)$/;"	f	class:CMyMsgProcessor	access:public	signature:(CMessage * pMsg)
CMyMsgProcessor::On_QuitMsg	test.cpp	/^	CStatus On_QuitMsg(CMessage * pMsg)$/;"	f	class:CMyMsgProcessor	access:public	signature:(CMessage * pMsg)
CQuitMessage	test.cpp	/^	CQuitMessage():CMessage(QUIT_MESSAGE_LOOP)$/;"	f	class:CQuitMessage	access:public	signature:()
CQuitMessage	test.cpp	/^class CQuitMessage : public CMessage$/;"	c	file:	inherits:CMessage
CQuitMessage::CQuitMessage	test.cpp	/^	CQuitMessage():CMessage(QUIT_MESSAGE_LOOP)$/;"	f	class:CQuitMessage	access:public	signature:()
CSTATUS_H	CStatus.h	2;"	d
CStatus	CStatus.cpp	/^CStatus::CStatus(const CStatus & sta):m_ciReturnCode(m_iReturnCode), m_ciErrorCode(m_iErrorCode)$/;"	f	class:CStatus	signature:(const CStatus & sta)
CStatus	CStatus.cpp	/^CStatus::CStatus(int iReturnCode, int iErrorCode):m_ciReturnCode(m_iReturnCode),m_ciErrorCode(m_iErrorCode)$/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode)
CStatus	CStatus.cpp	/^CStatus::CStatus(int iReturnCode, int iErrorCode, const char * pErrorMsg):m_ciReturnCode(m_iReturnCode)$/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
CStatus	CStatus.h	/^	CStatus(int iReturnCode, int iErrorCode);$/;"	p	class:CStatus	access:public	signature:(int iReturnCode, int iErrorCode)
CStatus	CStatus.h	/^	CStatus(int iReturnCode, int iErrorCode, const char * msg);$/;"	p	class:CStatus	access:public	signature:(int iReturnCode, int iErrorCode, const char * msg)
CStatus	CStatus.h	/^ 	CStatus(const CStatus & sta);$/;"	p	class:CStatus	access:public	signature:(const CStatus & sta)
CStatus	CStatus.h	/^class CStatus$/;"	c
CStatus::CStatus	CStatus.cpp	/^CStatus::CStatus(const CStatus & sta):m_ciReturnCode(m_iReturnCode), m_ciErrorCode(m_iErrorCode)$/;"	f	class:CStatus	signature:(const CStatus & sta)
CStatus::CStatus	CStatus.cpp	/^CStatus::CStatus(int iReturnCode, int iErrorCode):m_ciReturnCode(m_iReturnCode),m_ciErrorCode(m_iErrorCode)$/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode)
CStatus::CStatus	CStatus.cpp	/^CStatus::CStatus(int iReturnCode, int iErrorCode, const char * pErrorMsg):m_ciReturnCode(m_iReturnCode)$/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
CStatus::CStatus	CStatus.h	/^	CStatus(int iReturnCode, int iErrorCode);$/;"	p	class:CStatus	access:public	signature:(int iReturnCode, int iErrorCode)
CStatus::CStatus	CStatus.h	/^	CStatus(int iReturnCode, int iErrorCode, const char * msg);$/;"	p	class:CStatus	access:public	signature:(int iReturnCode, int iErrorCode, const char * msg)
CStatus::CStatus	CStatus.h	/^ 	CStatus(const CStatus & sta);$/;"	p	class:CStatus	access:public	signature:(const CStatus & sta)
CStatus::GetErrorMsg	CStatus.cpp	/^char * CStatus::GetErrorMsg()$/;"	f	class:CStatus	signature:()
CStatus::GetErrorMsg	CStatus.h	/^	char * GetErrorMsg();$/;"	p	class:CStatus	access:public	signature:()
CStatus::InitializeMemberVars	CStatus.cpp	/^void CStatus::InitializeMemberVars(int iReturnCode, int iErrorCode, const char * pErrorMsg) $/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
CStatus::InitializeMemberVars	CStatus.h	/^	void InitializeMemberVars(int iReturnCode, int iErrorCode, const char * pErrorMsg);$/;"	p	class:CStatus	access:private	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
CStatus::IsSuccess	CStatus.cpp	/^bool CStatus::IsSuccess()$/;"	f	class:CStatus	signature:()
CStatus::IsSuccess	CStatus.h	/^	bool IsSuccess();$/;"	p	class:CStatus	access:public	signature:()
CStatus::m_ciErrorCode	CStatus.h	/^	const int & m_ciErrorCode;$/;"	m	class:CStatus	access:public
CStatus::m_ciReturnCode	CStatus.h	/^	const int & m_ciReturnCode;$/;"	m	class:CStatus	access:public
CStatus::m_iErrorCode	CStatus.h	/^	int m_iErrorCode;$/;"	m	class:CStatus	access:private
CStatus::m_iReturnCode	CStatus.h	/^	int m_iReturnCode;$/;"	m	class:CStatus	access:private
CStatus::m_pErrorMsg	CStatus.h	/^	char * m_pErrorMsg;$/;"	m	class:CStatus	access:private
CStatus::~CStatus	CStatus.cpp	/^CStatus::~CStatus()$/;"	f	class:CStatus	signature:()
CStatus::~CStatus	CStatus.h	/^	virtual ~CStatus();$/;"	p	class:CStatus	access:public	signature:()
CTHREADFORMSGLOOP_H	CThreadUsingMsgLoop.h	4;"	d
CTHREADINITIALFINISHEDNOTIFIER_H	CThreadInitFinishedNotifier.h	5;"	d
CTHREAD_H	CThread.h	3;"	d
CThread	CThread.cpp	/^CThread::CThread(CUsrBizForExecObj * pUsrBizForExecObj):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CThread	signature:(CUsrBizForExecObj * pUsrBizForExecObj)
CThread	CThread.cpp	/^CThread::CThread(CUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CThread	signature:(CUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath)
CThread	CThread.h	/^	explicit CThread(CUsrBizForExecObj * pUsrBizForExecObj);$/;"	p	class:CThread	access:public	signature:(CUsrBizForExecObj * pUsrBizForExecObj)
CThread	CThread.h	/^	explicit CThread(CUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath);$/;"	p	class:CThread	access:public	signature:(CUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath)
CThread	CThread.h	/^class CThread : public CExecutiveObject$/;"	c	inherits:CExecutiveObject
CThread::CThread	CThread.cpp	/^CThread::CThread(CUsrBizForExecObj * pUsrBizForExecObj):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CThread	signature:(CUsrBizForExecObj * pUsrBizForExecObj)
CThread::CThread	CThread.cpp	/^CThread::CThread(CUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CThread	signature:(CUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath)
CThread::CThread	CThread.h	/^	explicit CThread(CUsrBizForExecObj * pUsrBizForExecObj);$/;"	p	class:CThread	access:public	signature:(CUsrBizForExecObj * pUsrBizForExecObj)
CThread::CThread	CThread.h	/^	explicit CThread(CUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath);$/;"	p	class:CThread	access:public	signature:(CUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath)
CThread::Run	CThread.cpp	/^CStatus CThread::Run(void * pContext)$/;"	f	class:CThread	signature:(void * pContext)
CThread::Run	CThread.h	/^	virtual CStatus Run(void * pContext);$/;"	p	class:CThread	access:public	signature:(void * pContext)
CThread::StartFunctionOfThread	CThread.cpp	/^void * CThread::StartFunctionOfThread(void * pThis)$/;"	f	class:CThread	signature:(void * pThis)
CThread::StartFunctionOfThread	CThread.h	/^	static void * StartFunctionOfThread(void * pContext);$/;"	p	class:CThread	access:private	signature:(void * pContext)
CThread::WaitForDeath	CThread.cpp	/^CStatus CThread::WaitForDeath()$/;"	f	class:CThread	signature:()
CThread::WaitForDeath	CThread.h	/^	virtual CStatus WaitForDeath();$/;"	p	class:CThread	access:public	signature:()
CThread::m_ThreadID	CThread.h	/^	pthread_t m_ThreadID;$/;"	m	class:CThread	access:private
CThread::m_bThreadCreated	CThread.h	/^	bool m_bThreadCreated;$/;"	m	class:CThread	access:private
CThread::m_bWaitForDeath	CThread.h	/^	bool m_bWaitForDeath;$/;"	m	class:CThread	access:private
CThread::m_pContext	CThread.h	/^	void * m_pContext;$/;"	m	class:CThread	access:private
CThread::~CThread	CThread.cpp	/^CThread::~CThread()$/;"	f	class:CThread	signature:()
CThread::~CThread	CThread.h	/^	virtual ~CThread();$/;"	p	class:CThread	access:public	signature:()
CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.cpp	/^CThreadInitFinishedNotifier::CThreadInitFinishedNotifier(CEvent * pEvent)$/;"	f	class:CThreadInitFinishedNotifier	signature:(CEvent * pEvent)
CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.h	/^	CThreadInitFinishedNotifier(CEvent * pEvent);$/;"	p	class:CThreadInitFinishedNotifier	access:public	signature:(CEvent * pEvent)
CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.h	/^class CThreadInitFinishedNotifier : public IInitFinishedNotifier$/;"	c	inherits:IInitFinishedNotifier
CThreadInitFinishedNotifier::CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.cpp	/^CThreadInitFinishedNotifier::CThreadInitFinishedNotifier(CEvent * pEvent)$/;"	f	class:CThreadInitFinishedNotifier	signature:(CEvent * pEvent)
CThreadInitFinishedNotifier::CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.h	/^	CThreadInitFinishedNotifier(CEvent * pEvent);$/;"	p	class:CThreadInitFinishedNotifier	access:public	signature:(CEvent * pEvent)
CThreadInitFinishedNotifier::IsInitialSuccess	CThreadInitFinishedNotifier.cpp	/^bool CThreadInitFinishedNotifier::IsInitialSuccess()$/;"	f	class:CThreadInitFinishedNotifier	signature:()
CThreadInitFinishedNotifier::IsInitialSuccess	CThreadInitFinishedNotifier.h	/^	virtual bool IsInitialSuccess();$/;"	p	class:CThreadInitFinishedNotifier	access:public	signature:()
CThreadInitFinishedNotifier::NotifyInitialFinished	CThreadInitFinishedNotifier.cpp	/^CStatus CThreadInitFinishedNotifier:: NotifyInitialFinished(bool bIsSuccess)$/;"	f	class:CThreadInitFinishedNotifier	signature:(bool bIsSuccess)
CThreadInitFinishedNotifier::NotifyInitialFinished	CThreadInitFinishedNotifier.h	/^	virtual CStatus NotifyInitialFinished(bool bIsSuccess);$/;"	p	class:CThreadInitFinishedNotifier	access:public	signature:(bool bIsSuccess)
CThreadInitFinishedNotifier::m_bIsSucess	CThreadInitFinishedNotifier.h	/^	bool m_bIsSucess;$/;"	m	class:CThreadInitFinishedNotifier	access:private
CThreadInitFinishedNotifier::m_pEvent	CThreadInitFinishedNotifier.h	/^	CEvent * m_pEvent;$/;"	m	class:CThreadInitFinishedNotifier	access:private
CThreadInitFinishedNotifier::~CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.cpp	/^CThreadInitFinishedNotifier::~CThreadInitFinishedNotifier()$/;"	f	class:CThreadInitFinishedNotifier	signature:()
CThreadInitFinishedNotifier::~CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.h	/^	virtual ~CThreadInitFinishedNotifier();$/;"	p	class:CThreadInitFinishedNotifier	access:public	signature:()
CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: CThreadUsingMsgLoop(const char * strThreadName,CMsgObserver * pMsgObserver)$/;"	f	class:CThreadUsingMsgLoop	signature:(const char * strThreadName,CMsgObserver * pMsgObserver)
CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: CThreadUsingMsgLoop(const char * strThreadName,CMsgObserver * pMsgObserver,bool bWaitForDeath)$/;"	f	class:CThreadUsingMsgLoop	signature:(const char * strThreadName,CMsgObserver * pMsgObserver,bool bWaitForDeath)
CThreadUsingMsgLoop	CThreadUsingMsgLoop.h	/^	CThreadUsingMsgLoop(const char * strThreadNaem,CMsgObserver * pMsgObserver,bool bWaitForDeath);$/;"	p	class:CThreadUsingMsgLoop	access:public	signature:(const char * strThreadNaem,CMsgObserver * pMsgObserver,bool bWaitForDeath)
CThreadUsingMsgLoop	CThreadUsingMsgLoop.h	/^	CThreadUsingMsgLoop(const char * strThreadName, CMsgObserver * pMsgObserver);$/;"	p	class:CThreadUsingMsgLoop	access:public	signature:(const char * strThreadName, CMsgObserver * pMsgObserver)
CThreadUsingMsgLoop	CThreadUsingMsgLoop.h	/^class CThreadUsingMsgLoop$/;"	c
CThreadUsingMsgLoop::CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: CThreadUsingMsgLoop(const char * strThreadName,CMsgObserver * pMsgObserver)$/;"	f	class:CThreadUsingMsgLoop	signature:(const char * strThreadName,CMsgObserver * pMsgObserver)
CThreadUsingMsgLoop::CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: CThreadUsingMsgLoop(const char * strThreadName,CMsgObserver * pMsgObserver,bool bWaitForDeath)$/;"	f	class:CThreadUsingMsgLoop	signature:(const char * strThreadName,CMsgObserver * pMsgObserver,bool bWaitForDeath)
CThreadUsingMsgLoop::CThreadUsingMsgLoop	CThreadUsingMsgLoop.h	/^	CThreadUsingMsgLoop(const char * strThreadNaem,CMsgObserver * pMsgObserver,bool bWaitForDeath);$/;"	p	class:CThreadUsingMsgLoop	access:public	signature:(const char * strThreadNaem,CMsgObserver * pMsgObserver,bool bWaitForDeath)
CThreadUsingMsgLoop::CThreadUsingMsgLoop	CThreadUsingMsgLoop.h	/^	CThreadUsingMsgLoop(const char * strThreadName, CMsgObserver * pMsgObserver);$/;"	p	class:CThreadUsingMsgLoop	access:public	signature:(const char * strThreadName, CMsgObserver * pMsgObserver)
CThreadUsingMsgLoop::Run	CThreadUsingMsgLoop.cpp	/^CStatus CThreadUsingMsgLoop::Run(void * pContext)$/;"	f	class:CThreadUsingMsgLoop	signature:(void * pContext)
CThreadUsingMsgLoop::Run	CThreadUsingMsgLoop.h	/^	CStatus Run(void * pContext);$/;"	p	class:CThreadUsingMsgLoop	access:public	signature:(void * pContext)
CThreadUsingMsgLoop::m_bWaitForDeath	CThreadUsingMsgLoop.h	/^	bool m_bWaitForDeath;$/;"	m	class:CThreadUsingMsgLoop	access:private
CThreadUsingMsgLoop::m_pThread	CThreadUsingMsgLoop.h	/^	CThread * m_pThread;$/;"	m	class:CThreadUsingMsgLoop	access:private
CThreadUsingMsgLoop::~CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: ~CThreadUsingMsgLoop()$/;"	f	class:CThreadUsingMsgLoop	signature:()
CThreadUsingMsgLoop::~CThreadUsingMsgLoop	CThreadUsingMsgLoop.h	/^	virtual ~CThreadUsingMsgLoop();$/;"	p	class:CThreadUsingMsgLoop	access:public	signature:()
CUSEMSGLOOPWITHOUTTHREAD_H	CUseMsgLoopWithoutThread.h	5;"	d
CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.cpp	/^CUseMsgLoopWithoutThread::CUseMsgLoopWithoutThread(const char * strThreadName, CMessageObserver * pMsgObserver)$/;"	f	class:CUseMsgLoopWithoutThread	signature:(const char * strThreadName, CMessageObserver * pMsgObserver)
CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.h	/^	CUseMsgLoopWithoutThread(const char * strThreadName, CMsgObserver * pMsgObserver);$/;"	p	class:CUseMsgLoopWithoutThread	access:public	signature:(const char * strThreadName, CMsgObserver * pMsgObserver)
CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.h	/^class CUseMsgLoopWithoutThread$/;"	c
CUseMsgLoopWithoutThread::CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.cpp	/^CUseMsgLoopWithoutThread::CUseMsgLoopWithoutThread(const char * strThreadName, CMessageObserver * pMsgObserver)$/;"	f	class:CUseMsgLoopWithoutThread	signature:(const char * strThreadName, CMessageObserver * pMsgObserver)
CUseMsgLoopWithoutThread::CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.h	/^	CUseMsgLoopWithoutThread(const char * strThreadName, CMsgObserver * pMsgObserver);$/;"	p	class:CUseMsgLoopWithoutThread	access:public	signature:(const char * strThreadName, CMsgObserver * pMsgObserver)
CUseMsgLoopWithoutThread::Run	CUseMsgLoopWithoutThread.cpp	/^CStatus CUseMsgLoopWithoutThread::Run(void * pContext)$/;"	f	class:CUseMsgLoopWithoutThread	signature:(void * pContext)
CUseMsgLoopWithoutThread::Run	CUseMsgLoopWithoutThread.h	/^	CStatus Run(void * pContext);$/;"	p	class:CUseMsgLoopWithoutThread	access:public	signature:(void * pContext)
CUseMsgLoopWithoutThread::m_pUsrBiz	CUseMsgLoopWithoutThread.h	/^	CUsrBizForExecObj * m_pUsrBiz;$/;"	m	class:CUseMsgLoopWithoutThread	access:private
CUseMsgLoopWithoutThread::~CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.cpp	/^CUseMsgLoopWithoutThread::~CUseMsgLoopWithoutThread()$/;"	f	class:CUseMsgLoopWithoutThread	signature:()
CUseMsgLoopWithoutThread::~CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.h	/^	virtual ~CUseMsgLoopWithoutThread();$/;"	p	class:CUseMsgLoopWithoutThread	access:public	signature:()
CUsrBizForExecObj	IUsrBizForExecObj.cpp	/^CUsrBizForExecObj::CUsrBizForExecObj()$/;"	f	class:CUsrBizForExecObj	signature:()
CUsrBizForExecObj	IUsrBizForExecObj.h	/^	CUsrBizForExecObj();$/;"	p	class:CUsrBizForExecObj	access:public	signature:()
CUsrBizForExecObj	IUsrBizForExecObj.h	/^	CUsrBizForExecObj(const CUsrBizForExecObj &);$/;"	p	class:CUsrBizForExecObj	access:private	signature:(const CUsrBizForExecObj &)
CUsrBizForExecObj	IUsrBizForExecObj.h	/^class CUsrBizForExecObj$/;"	c
CUsrBizForExecObj::CUsrBizForExecObj	IUsrBizForExecObj.cpp	/^CUsrBizForExecObj::CUsrBizForExecObj()$/;"	f	class:CUsrBizForExecObj	signature:()
CUsrBizForExecObj::CUsrBizForExecObj	IUsrBizForExecObj.h	/^	CUsrBizForExecObj();$/;"	p	class:CUsrBizForExecObj	access:public	signature:()
CUsrBizForExecObj::CUsrBizForExecObj	IUsrBizForExecObj.h	/^	CUsrBizForExecObj(const CUsrBizForExecObj &);$/;"	p	class:CUsrBizForExecObj	access:private	signature:(const CUsrBizForExecObj &)
CUsrBizForExecObj::RunClientBusiness	IUsrBizForExecObj.h	/^	virtual CStatus RunClientBusiness(void * pContext) = 0;$/;"	p	class:CUsrBizForExecObj	access:public	signature:(void * pContext)
CUsrBizForExecObj::operator =	IUsrBizForExecObj.h	/^	CUsrBizForExecObj & operator = (const CUsrBizForExecObj &);$/;"	p	class:CUsrBizForExecObj	access:private	signature:(const CUsrBizForExecObj &)
CUsrBizForExecObj::~CUsrBizForExecObj	IUsrBizForExecObj.cpp	/^CUsrBizForExecObj::~CUsrBizForExecObj()$/;"	f	class:CUsrBizForExecObj	signature:()
CUsrBizForExecObj::~CUsrBizForExecObj	IUsrBizForExecObj.h	/^	virtual ~CUsrBizForExecObj();$/;"	p	class:CUsrBizForExecObj	access:public	signature:()
CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.cpp	/^CUsrBizUsingMsgLoop::CUsrBizUsingMsgLoop(CMsgLoopManager *pMsgLoopManager)$/;"	f	class:CUsrBizUsingMsgLoop	signature:(CMsgLoopManager *pMsgLoopManager)
CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.h	/^	CUsrBizUsingMsgLoop(CMsgLoopManager * pMsgLoopManager);$/;"	p	class:CUsrBizUsingMsgLoop	access:public	signature:(CMsgLoopManager * pMsgLoopManager)
CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.h	/^class CUsrBizUsingMsgLoop : public CUsrBizForExecObj$/;"	c	inherits:CUsrBizForExecObj
CUsrBizUsingMsgLoop::CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.cpp	/^CUsrBizUsingMsgLoop::CUsrBizUsingMsgLoop(CMsgLoopManager *pMsgLoopManager)$/;"	f	class:CUsrBizUsingMsgLoop	signature:(CMsgLoopManager *pMsgLoopManager)
CUsrBizUsingMsgLoop::CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.h	/^	CUsrBizUsingMsgLoop(CMsgLoopManager * pMsgLoopManager);$/;"	p	class:CUsrBizUsingMsgLoop	access:public	signature:(CMsgLoopManager * pMsgLoopManager)
CUsrBizUsingMsgLoop::RunClientBusiness	CUsrBizUsingMsgLoop.cpp	/^CStatus CUsrBizUsingMsgLoop::RunClientBusiness(void *pContext)$/;"	f	class:CUsrBizUsingMsgLoop	signature:(void *pContext)
CUsrBizUsingMsgLoop::RunClientBusiness	CUsrBizUsingMsgLoop.h	/^	virtual CStatus RunClientBusiness(void * pContext);$/;"	p	class:CUsrBizUsingMsgLoop	access:public	signature:(void * pContext)
CUsrBizUsingMsgLoop::m_pMsgLoopManager	CUsrBizUsingMsgLoop.h	/^	CMsgLoopManager * m_pMsgLoopManager;$/;"	m	class:CUsrBizUsingMsgLoop	access:private
CUsrBizUsingMsgLoop::~CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.cpp	/^CUsrBizUsingMsgLoop:: ~CUsrBizUsingMsgLoop()$/;"	f	class:CUsrBizUsingMsgLoop	signature:()
CUsrBizUsingMsgLoop::~CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.h	/^	virtual ~CUsrBizUsingMsgLoop();$/;"	p	class:CUsrBizUsingMsgLoop	access:public	signature:()
CUsrDefMsgQueue	CUsrDefMsgQueue.cpp	/^CUsrDefMsgQueue::CUsrDefMsgQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue	CUsrDefMsgQueue.h	/^	CUsrDefMsgQueue();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
CUsrDefMsgQueue	CUsrDefMsgQueue.h	/^class CUsrDefMsgQueue$/;"	c
CUsrDefMsgQueue::CUsrDefMsgQueue	CUsrDefMsgQueue.cpp	/^CUsrDefMsgQueue::CUsrDefMsgQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::CUsrDefMsgQueue	CUsrDefMsgQueue.h	/^	CUsrDefMsgQueue();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
CUsrDefMsgQueue::EnlargeQueue	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::EnlargeQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::EnlargeQueue	CUsrDefMsgQueue.h	/^	CStatus EnlargeQueue();$/;"	p	class:CUsrDefMsgQueue	access:private	signature:()
CUsrDefMsgQueue::GetMessage	CUsrDefMsgQueue.cpp	/^CMessage * CUsrDefMsgQueue::GetMessage()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::GetMessage	CUsrDefMsgQueue.h	/^	CMessage * GetMessage();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
CUsrDefMsgQueue::IsEmpty	CUsrDefMsgQueue.cpp	/^bool CUsrDefMsgQueue::IsEmpty()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::IsEmpty	CUsrDefMsgQueue.h	/^	bool IsEmpty();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
CUsrDefMsgQueue::IsFull	CUsrDefMsgQueue.cpp	/^bool CUsrDefMsgQueue::IsFull()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::IsFull	CUsrDefMsgQueue.h	/^ 	bool IsFull();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
CUsrDefMsgQueue::Pop	CUsrDefMsgQueue.cpp	/^CMessage * CUsrDefMsgQueue::Pop()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::Pop	CUsrDefMsgQueue.h	/^	CMessage * Pop();$/;"	p	class:CUsrDefMsgQueue	access:private	signature:()
CUsrDefMsgQueue::Push	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::Push(CMessage * pMsg)$/;"	f	class:CUsrDefMsgQueue	signature:(CMessage * pMsg)
CUsrDefMsgQueue::Push	CUsrDefMsgQueue.h	/^	CStatus Push(CMessage * pMsg);$/;"	p	class:CUsrDefMsgQueue	access:private	signature:(CMessage * pMsg)
CUsrDefMsgQueue::PushMessage	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::PushMessage(CMessage * pMsg)$/;"	f	class:CUsrDefMsgQueue	signature:(CMessage * pMsg)
CUsrDefMsgQueue::PushMessage	CUsrDefMsgQueue.h	/^	CStatus PushMessage(CMessage * pMsg);$/;"	p	class:CUsrDefMsgQueue	access:public	signature:(CMessage * pMsg)
CUsrDefMsgQueue::m_Event	CUsrDefMsgQueue.h	/^	CEvent m_Event;$/;"	m	class:CUsrDefMsgQueue	access:private
CUsrDefMsgQueue::m_Mutex	CUsrDefMsgQueue.h	/^	CMutex m_Mutex;$/;"	m	class:CUsrDefMsgQueue	access:private
CUsrDefMsgQueue::m_iQueueHead	CUsrDefMsgQueue.h	/^	int m_iQueueHead;$/;"	m	class:CUsrDefMsgQueue	access:private
CUsrDefMsgQueue::m_iQueueTail	CUsrDefMsgQueue.h	/^	int m_iQueueTail;$/;"	m	class:CUsrDefMsgQueue	access:private
CUsrDefMsgQueue::m_iTotalRoom	CUsrDefMsgQueue.h	/^	int m_iTotalRoom;$/;"	m	class:CUsrDefMsgQueue	access:private
CUsrDefMsgQueue::m_pQueueSpace	CUsrDefMsgQueue.h	/^	CMessage ** m_pQueueSpace;$/;"	m	class:CUsrDefMsgQueue	access:private
CUsrDefMsgQueue::~CUsrDefMsgQueue	CUsrDefMsgQueue.cpp	/^CUsrDefMsgQueue::~CUsrDefMsgQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::~CUsrDefMsgQueue	CUsrDefMsgQueue.h	/^	virtual ~CUsrDefMsgQueue();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
CallBackFunctionOfMsgObserver	CMsgLoopManager.h	/^typedef CStatus (CMsgObserver:: *CallBackFunctionOfMsgObserver)(CMessage *);$/;"	t
DispatchMessage	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::DispatchMessage(CMessage * pMsg)$/;"	f	class:CMsgLoopManager	signature:(CMessage * pMsg)
DispatchMessage	CMsgLoopManager.h	/^	virtual CStatus DispatchMessage(CMessage * pMsg);$/;"	p	class:CMsgLoopManager	access:protected	signature:(CMessage * pMsg)
EnlargeQueue	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::EnlargeQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
EnlargeQueue	CUsrDefMsgQueue.h	/^	CStatus EnlargeQueue();$/;"	p	class:CUsrDefMsgQueue	access:private	signature:()
EnterMessageLoop	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::EnterMessageLoop(void * pContext)$/;"	f	class:CMsgLoopManager	signature:(void * pContext)
EnterMessageLoop	CMsgLoopManager.h	/^	virtual CStatus EnterMessageLoop(void * pContext);$/;"	p	class:CMsgLoopManager	access:public	signature:(void * pContext)
GetCommunicationObject	CCommunicationNameServer.cpp	/^ICommunicationObject * CCommunicationNameServer::GetCommunicationObject(const char * strCommObjName)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName)
GetCommunicationObject	CCommunicationNameServer.h	/^	ICommunicationObject * GetCommunicationObject(const char * strCommObjName);$/;"	p	class:CCommunicationNameServer	access:public	signature:(const char * strCommObjName)
GetErrorMsg	CStatus.cpp	/^char * CStatus::GetErrorMsg()$/;"	f	class:CStatus	signature:()
GetErrorMsg	CStatus.h	/^	char * GetErrorMsg();$/;"	p	class:CStatus	access:public	signature:()
GetInstance	CCommunicationNameServer.cpp	/^CCommunicationNameServer * CCommunicationNameServer:: GetInstance()$/;"	f	class:CCommunicationNameServer	signature:()
GetInstance	CCommunicationNameServer.h	/^	static CCommunicationNameServer * GetInstance();$/;"	p	class:CCommunicationNameServer	access:public	signature:()
GetMessage	CUsrDefMsgQueue.cpp	/^CMessage * CUsrDefMsgQueue::GetMessage()$/;"	f	class:CUsrDefMsgQueue	signature:()
GetMessage	CUsrDefMsgQueue.h	/^	CMessage * GetMessage();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
ICOMMUNICATIONOBJECT_H	ICommunicationObject.h	4;"	d
ICommunicationObject	ICommunicationObject.cpp	/^ICommunicationObject:: ICommunicationObject()$/;"	f	class:ICommunicationObject	signature:()
ICommunicationObject	ICommunicationObject.h	/^	ICommunicationObject();$/;"	p	class:ICommunicationObject	access:public	signature:()
ICommunicationObject	ICommunicationObject.h	/^class ICommunicationObject$/;"	c
ICommunicationObject::ICommunicationObject	ICommunicationObject.cpp	/^ICommunicationObject:: ICommunicationObject()$/;"	f	class:ICommunicationObject	signature:()
ICommunicationObject::ICommunicationObject	ICommunicationObject.h	/^	ICommunicationObject();$/;"	p	class:ICommunicationObject	access:public	signature:()
ICommunicationObject::PostMessage	ICommunicationObject.h	/^	virtual CStatus PostMessage(CMessage * pMsg) = 0;$/;"	p	class:ICommunicationObject	access:public	signature:(CMessage * pMsg)
ICommunicationObject::~ICommunicationObject	ICommunicationObject.cpp	/^ICommunicationObject:: ~ICommunicationObject()$/;"	f	class:ICommunicationObject	signature:()
ICommunicationObject::~ICommunicationObject	ICommunicationObject.h	/^	virtual ~ICommunicationObject();$/;"	p	class:ICommunicationObject	access:public	signature:()
IINITIALFINISHEDNOTIFIER_H	IInitFinishedNotifier.h	4;"	d
IInitFinishedNotifier	IInitFinishedNotifier.h	/^class IInitFinishedNotifier$/;"	c
IInitFinishedNotifier::IsInitialSuccess	IInitFinishedNotifier.h	/^	virtual bool IsInitialSuccess() = 0;$/;"	p	class:IInitFinishedNotifier	access:public	signature:()
IInitFinishedNotifier::NotifyInitialFinished	IInitFinishedNotifier.h	/^	virtual CStatus NotifyInitialFinished(bool bIsSuccess) = 0;$/;"	p	class:IInitFinishedNotifier	access:public	signature:(bool bIsSuccess)
Initialize	CMsgLoopManager.h	/^	virtual CStatus Initialize()=0;$/;"	p	class:CMsgLoopManager	access:protected	signature:()
Initialize	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CStatus CMsgLoopMgrUsingUsrDefQueue::Initialize()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
Initialize	CMsgLoopMgrUsingUsrDefQueue.h	/^	virtual CStatus Initialize();$/;"	p	class:CMsgLoopMgrUsingUsrDefQueue	access:public	signature:()
Initialize	CMsgObserver.h	/^	virtual CStatus Initialize(CMsgLoopManager * pMsgLoopMgr,void * pContext) =0;$/;"	p	class:CMsgObserver	access:public	signature:(CMsgLoopManager * pMsgLoopMgr,void * pContext)
Initialize	test.cpp	/^	virtual CStatus Initialize(CMsgLoopManager * pMsgLoopMgr, void * pContext)$/;"	f	class:CMyMsgProcessor	access:public	signature:(CMsgLoopManager * pMsgLoopMgr, void * pContext)
InitializeMemberVars	CStatus.cpp	/^void CStatus::InitializeMemberVars(int iReturnCode, int iErrorCode, const char * pErrorMsg) $/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
InitializeMemberVars	CStatus.h	/^	void InitializeMemberVars(int iReturnCode, int iErrorCode, const char * pErrorMsg);$/;"	p	class:CStatus	access:private	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
IsEmpty	CUsrDefMsgQueue.cpp	/^bool CUsrDefMsgQueue::IsEmpty()$/;"	f	class:CUsrDefMsgQueue	signature:()
IsEmpty	CUsrDefMsgQueue.h	/^	bool IsEmpty();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
IsFull	CUsrDefMsgQueue.cpp	/^bool CUsrDefMsgQueue::IsFull()$/;"	f	class:CUsrDefMsgQueue	signature:()
IsFull	CUsrDefMsgQueue.h	/^ 	bool IsFull();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
IsInitialSuccess	CThreadInitFinishedNotifier.cpp	/^bool CThreadInitFinishedNotifier::IsInitialSuccess()$/;"	f	class:CThreadInitFinishedNotifier	signature:()
IsInitialSuccess	CThreadInitFinishedNotifier.h	/^	virtual bool IsInitialSuccess();$/;"	p	class:CThreadInitFinishedNotifier	access:public	signature:()
IsInitialSuccess	IInitFinishedNotifier.h	/^	virtual bool IsInitialSuccess() = 0;$/;"	p	class:IInitFinishedNotifier	access:public	signature:()
IsSuccess	CStatus.cpp	/^bool CStatus::IsSuccess()$/;"	f	class:CStatus	signature:()
IsSuccess	CStatus.h	/^	bool IsSuccess();$/;"	p	class:CStatus	access:public	signature:()
Lock	CMutex.h	/^	CStatus Lock();$/;"	p	class:CMutex	access:public	signature:()
Lock	src/CMutex.cpp	/^CStatus CMutex::Lock()$/;"	f	class:CMutex	signature:()
MESSAGEIDTABLE_H	MessageIDTable.h	3;"	d
NotifyInitialFinished	CThreadInitFinishedNotifier.cpp	/^CStatus CThreadInitFinishedNotifier:: NotifyInitialFinished(bool bIsSuccess)$/;"	f	class:CThreadInitFinishedNotifier	signature:(bool bIsSuccess)
NotifyInitialFinished	CThreadInitFinishedNotifier.h	/^	virtual CStatus NotifyInitialFinished(bool bIsSuccess);$/;"	p	class:CThreadInitFinishedNotifier	access:public	signature:(bool bIsSuccess)
NotifyInitialFinished	IInitFinishedNotifier.h	/^	virtual CStatus NotifyInitialFinished(bool bIsSuccess) = 0;$/;"	p	class:IInitFinishedNotifier	access:public	signature:(bool bIsSuccess)
On_AddMsg	test.cpp	/^	CStatus On_AddMsg(CMessage * pMsg)$/;"	f	class:CMyMsgProcessor	access:public	signature:(CMessage * pMsg)
On_QuitMsg	test.cpp	/^	CStatus On_QuitMsg(CMessage * pMsg)$/;"	f	class:CMyMsgProcessor	access:public	signature:(CMessage * pMsg)
Pop	CUsrDefMsgQueue.cpp	/^CMessage * CUsrDefMsgQueue::Pop()$/;"	f	class:CUsrDefMsgQueue	signature:()
Pop	CUsrDefMsgQueue.h	/^	CMessage * Pop();$/;"	p	class:CUsrDefMsgQueue	access:private	signature:()
PostMessage	CCommunicationByMsgQueue.cpp	/^CStatus CCommunicationByMsgQueue:: PostMessage(CMessage * pMsg)$/;"	f	class:CCommunicationByMsgQueue	signature:(CMessage * pMsg)
PostMessage	CCommunicationByMsgQueue.h	/^	virtual CStatus PostMessage(CMessage * pMsg);$/;"	p	class:CCommunicationByMsgQueue	access:public	signature:(CMessage * pMsg)
PostMessage	ICommunicationObject.h	/^	virtual CStatus PostMessage(CMessage * pMsg) = 0;$/;"	p	class:ICommunicationObject	access:public	signature:(CMessage * pMsg)
Push	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::Push(CMessage * pMsg)$/;"	f	class:CUsrDefMsgQueue	signature:(CMessage * pMsg)
Push	CUsrDefMsgQueue.h	/^	CStatus Push(CMessage * pMsg);$/;"	p	class:CUsrDefMsgQueue	access:private	signature:(CMessage * pMsg)
PushMessage	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::PushMessage(CMessage * pMsg)$/;"	f	class:CUsrDefMsgQueue	signature:(CMessage * pMsg)
PushMessage	CUsrDefMsgQueue.h	/^	CStatus PushMessage(CMessage * pMsg);$/;"	p	class:CUsrDefMsgQueue	access:public	signature:(CMessage * pMsg)
QUEUE_AUTO_INCREMENT_SIZE	CUsrDefMsgQueue.cpp	24;"	d	file:
QUEUE_INITIAL_SIZE	CUsrDefMsgQueue.cpp	25;"	d	file:
QUIT_MESSAGE_LOOP	MessageIDTable.h	7;"	d
Register	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer:: Register(const char * strCommObjName, ICommunicationObject * pCommObj)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName, ICommunicationObject * pCommObj)
Register	CCommunicationNameServer.h	/^	CStatus Register(const char * strCommObjName,ICommunicationObject * pCommObj);$/;"	p	class:CCommunicationNameServer	access:public	signature:(const char * strCommObjName,ICommunicationObject * pCommObj)
Register	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::Register(unsigned int iMsgTypeID, CallBackFunctionOfMsgObserver pFunction)$/;"	f	class:CMsgLoopManager	signature:(unsigned int iMsgTypeID, CallBackFunctionOfMsgObserver pFunction)
Register	CMsgLoopManager.h	/^	virtual CStatus Register(unsigned int iMsgTypeID,CallBackFunctionOfMsgObserver pFunction);$/;"	p	class:CMsgLoopManager	access:public	signature:(unsigned int iMsgTypeID,CallBackFunctionOfMsgObserver pFunction)
ReleaseCommunicationObject	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer::ReleaseCommunicationObject(const char * strCommObjName)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName)
ReleaseCommunicationObject	CCommunicationNameServer.h	/^	CStatus ReleaseCommunicationObject(const char * strCommObjName);$/;"	p	class:CCommunicationNameServer	access:public	signature:(const char * strCommObjName)
Run	CExecutiveObject.h	/^	virtual CStatus Run(void * pContext) = 0;$/;"	p	class:CExecutiveObject	access:public	signature:(void * pContext)
Run	CThread.cpp	/^CStatus CThread::Run(void * pContext)$/;"	f	class:CThread	signature:(void * pContext)
Run	CThread.h	/^	virtual CStatus Run(void * pContext);$/;"	p	class:CThread	access:public	signature:(void * pContext)
Run	CThreadUsingMsgLoop.cpp	/^CStatus CThreadUsingMsgLoop::Run(void * pContext)$/;"	f	class:CThreadUsingMsgLoop	signature:(void * pContext)
Run	CThreadUsingMsgLoop.h	/^	CStatus Run(void * pContext);$/;"	p	class:CThreadUsingMsgLoop	access:public	signature:(void * pContext)
Run	CUseMsgLoopWithoutThread.cpp	/^CStatus CUseMsgLoopWithoutThread::Run(void * pContext)$/;"	f	class:CUseMsgLoopWithoutThread	signature:(void * pContext)
Run	CUseMsgLoopWithoutThread.h	/^	CStatus Run(void * pContext);$/;"	p	class:CUseMsgLoopWithoutThread	access:public	signature:(void * pContext)
RunClientBusiness	CUsrBizUsingMsgLoop.cpp	/^CStatus CUsrBizUsingMsgLoop::RunClientBusiness(void *pContext)$/;"	f	class:CUsrBizUsingMsgLoop	signature:(void *pContext)
RunClientBusiness	CUsrBizUsingMsgLoop.h	/^	virtual CStatus RunClientBusiness(void * pContext);$/;"	p	class:CUsrBizUsingMsgLoop	access:public	signature:(void * pContext)
RunClientBusiness	IUsrBizForExecObj.h	/^	virtual CStatus RunClientBusiness(void * pContext) = 0;$/;"	p	class:CUsrBizForExecObj	access:public	signature:(void * pContext)
SCommunicationPtrCount	CCommunicationNameServer.h	/^}SCommunicationPtrCount;$/;"	t	typeref:struct:__anon2
SInitialParameter	CThreadUsingMsgLoop.h	/^}SInitialParameter;$/;"	t	typeref:struct:__anon1
SendMessage	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer::SendMessage(const char * strCommObjName, CMessage * pMessage)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName, CMessage * pMessage)
SendMessage	CCommunicationNameServer.h	/^	static CStatus SendMessage(const char * strCommObjName, CMessage * pMessage);$/;"	p	class:CCommunicationNameServer	access:public	signature:(const char * strCommObjName, CMessage * pMessage)
Set	CEvent.h	/^	CStatus Set();$/;"	p	class:CEvent	access:public	signature:()
Set	src/CEvent.cpp	/^CStatus CEvent::Set()$/;"	f	class:CEvent	signature:()
StartFunctionOfThread	CThread.cpp	/^void * CThread::StartFunctionOfThread(void * pThis)$/;"	f	class:CThread	signature:(void * pThis)
StartFunctionOfThread	CThread.h	/^	static void * StartFunctionOfThread(void * pContext);$/;"	p	class:CThread	access:private	signature:(void * pContext)
Trylock	CMutex.h	/^	CStatus Trylock();$/;"	p	class:CMutex	access:public	signature:()
Uninitialize	CMsgLoopManager.h	/^	virtual CStatus Uninitialize()=0;$/;"	p	class:CMsgLoopManager	access:protected	signature:()
Uninitialize	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CStatus CMsgLoopMgrUsingUsrDefQueue:: Uninitialize()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
Uninitialize	CMsgLoopMgrUsingUsrDefQueue.h	/^	virtual CStatus Uninitialize();$/;"	p	class:CMsgLoopMgrUsingUsrDefQueue	access:public	signature:()
Unlock	CMutex.h	/^	CStatus Unlock();$/;"	p	class:CMutex	access:public	signature:()
Unlock	src/CMutex.cpp	/^CStatus CMutex::Unlock()$/;"	f	class:CMutex	signature:()
UseAsRecordCondVar	CEvent.h	/^	CStatus UseAsRecordCondVar(bool b);$/;"	p	class:CEvent	access:public	signature:(bool b)
UseAsRecordCondVar	src/CEvent.cpp	/^CStatus CEvent::UseAsRecordCondVar(bool b)$/;"	f	class:CEvent	signature:(bool b)
Wait	CConditionVariable.h	/^	CStatus Wait(CMutex * pMutex);$/;"	p	class:CConditionVariable	access:public	signature:(CMutex * pMutex)
Wait	CEvent.h	/^	CStatus Wait();$/;"	p	class:CEvent	access:public	signature:()
Wait	src/CConditionVariable.cpp	/^CStatus CConditionVariable::Wait(CMutex * pMutex)$/;"	f	class:CConditionVariable	signature:(CMutex * pMutex)
Wait	src/CEvent.cpp	/^CStatus CEvent::Wait()$/;"	f	class:CEvent	signature:()
WaitForDeath	CExecutiveObject.h	/^	virtual CStatus WaitForDeath() = 0;$/;"	p	class:CExecutiveObject	access:public	signature:()
WaitForDeath	CThread.cpp	/^CStatus CThread::WaitForDeath()$/;"	f	class:CThread	signature:()
WaitForDeath	CThread.h	/^	virtual CStatus WaitForDeath();$/;"	p	class:CThread	access:public	signature:()
WaitForMessage	CMsgLoopManager.h	/^	virtual CMessage * WaitForMessage() = 0;$/;"	p	class:CMsgLoopManager	access:protected	signature:()
WaitForMessage	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMessage * CMsgLoopMgrUsingUsrDefQueue:: WaitForMessage()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
WaitForMessage	CMsgLoopMgrUsingUsrDefQueue.h	/^	virtual CMessage * WaitForMessage();$/;"	p	class:CMsgLoopMgrUsingUsrDefQueue	access:public	signature:()
WaitForMessageFailedTimes	CMsgLoopManager.h	9;"	d
Wakeup	CConditionVariable.h	/^	CStatus Wakeup();$/;"	p	class:CConditionVariable	access:public	signature:()
Wakeup	src/CConditionVariable.cpp	/^CStatus CConditionVariable::Wakeup()$/;"	f	class:CConditionVariable	signature:()
WakeupAll	CConditionVariable.h	/^	CStatus WakeupAll();$/;"	p	class:CConditionVariable	access:public	signature:()
WakeupAll	src/CConditionVariable.cpp	/^CStatus CConditionVariable::WakeupAll()$/;"	f	class:CConditionVariable	signature:()
__anon1::pContext	CThreadUsingMsgLoop.h	/^	void * pContext;$/;"	m	struct:__anon1	access:public
__anon1::pNotifier	CThreadUsingMsgLoop.h	/^ 	CThreadInitFinishedNotifier *  pNotifier;$/;"	m	struct:__anon1	access:public
__anon2::iConnectionCount	CCommunicationNameServer.h	/^	unsigned int iConnectionCount;$/;"	m	struct:__anon2	access:public
__anon2::pCommObj	CCommunicationNameServer.h	/^	ICommunicationObject * pCommObj;$/;"	m	struct:__anon2	access:public
iConnectionCount	CCommunicationNameServer.h	/^	unsigned int iConnectionCount;$/;"	m	struct:__anon2	access:public
m_Cond	CConditionVariable.h	/^	pthread_cond_t m_Cond;$/;"	m	class:CConditionVariable	access:private
m_Cond	CEvent.h	/^	CConditionVariable m_Cond;$/;"	m	class:CEvent	access:private
m_Event	CUsrDefMsgQueue.h	/^	CEvent m_Event;$/;"	m	class:CUsrDefMsgQueue	access:private
m_MsgFuncMappingTable	CMsgLoopManager.h	/^	std::map<unsigned int,CallBackFunctionOfMsgObserver> m_MsgFuncMappingTable;$/;"	m	class:CMsgLoopManager	access:protected
m_Mutex	CEvent.h	/^	CMutex m_Mutex;$/;"	m	class:CEvent	access:private
m_Mutex	CMutex.h	/^	pthread_mutex_t m_Mutex;$/;"	m	class:CMutex	access:public
m_Mutex	CUsrDefMsgQueue.h	/^	CMutex m_Mutex;$/;"	m	class:CUsrDefMsgQueue	access:private
m_MutexForCreatingInstance	CCommunicationNameServer.cpp	/^CMutex CCommunicationNameServer::m_MutexForCreatingInstance;$/;"	m	class:CCommunicationNameServer	file:
m_MutexForCreatingInstance	CCommunicationNameServer.h	/^	static CMutex  m_MutexForCreatingInstance;$/;"	m	class:CCommunicationNameServer	access:private
m_MutexForNameTable	CCommunicationNameServer.h	/^	CMutex m_MutexForNameTable;$/;"	m	class:CCommunicationNameServer	access:private
m_NameTable	CCommunicationNameServer.h	/^	std::map<std::string,SCommunicationPtrCount *> m_NameTable;$/;"	m	class:CCommunicationNameServer	access:private
m_ThreadID	CThread.h	/^	pthread_t m_ThreadID;$/;"	m	class:CThread	access:private
m_bIsRecordCondVar	CEvent.h	/^	bool m_bIsRecordCondVar;$/;"	m	class:CEvent	access:private
m_bIsSucess	CThreadInitFinishedNotifier.h	/^	bool m_bIsSucess;$/;"	m	class:CThreadInitFinishedNotifier	access:private
m_bThreadCreated	CThread.h	/^	bool m_bThreadCreated;$/;"	m	class:CThread	access:private
m_bWaitForDeath	CThread.h	/^	bool m_bWaitForDeath;$/;"	m	class:CThread	access:private
m_bWaitForDeath	CThreadUsingMsgLoop.h	/^	bool m_bWaitForDeath;$/;"	m	class:CThreadUsingMsgLoop	access:private
m_ciErrorCode	CStatus.h	/^	const int & m_ciErrorCode;$/;"	m	class:CStatus	access:public
m_ciReturnCode	CStatus.h	/^	const int & m_ciReturnCode;$/;"	m	class:CStatus	access:public
m_clMsgID	CMessage.h	/^	const unsigned long & m_clMsgID;$/;"	m	class:CMessage	access:public
m_iErrorCode	CStatus.h	/^	int m_iErrorCode;$/;"	m	class:CStatus	access:private
m_iEventCounter	CEvent.h	/^	int  m_iEventCounter;$/;"	m	class:CEvent	access:private
m_iQueueHead	CUsrDefMsgQueue.h	/^	int m_iQueueHead;$/;"	m	class:CUsrDefMsgQueue	access:private
m_iQueueTail	CUsrDefMsgQueue.h	/^	int m_iQueueTail;$/;"	m	class:CUsrDefMsgQueue	access:private
m_iReturnCode	CStatus.h	/^	int m_iReturnCode;$/;"	m	class:CStatus	access:private
m_iTotalRoom	CUsrDefMsgQueue.h	/^	int m_iTotalRoom;$/;"	m	class:CUsrDefMsgQueue	access:private
m_lMsgID	CMessage.h	/^	unsigned long m_lMsgID;$/;"	m	class:CMessage	access:protected
m_op1	test.cpp	/^	int m_op1;$/;"	m	class:CAddMessage	file:	access:public
m_op2	test.cpp	/^	int m_op2;$/;"	m	class:CAddMessage	file:	access:public
m_pContext	CThread.h	/^	void * m_pContext;$/;"	m	class:CThread	access:private
m_pErrorMsg	CStatus.h	/^	char * m_pErrorMsg;$/;"	m	class:CStatus	access:private
m_pEvent	CThreadInitFinishedNotifier.h	/^	CEvent * m_pEvent;$/;"	m	class:CThreadInitFinishedNotifier	access:private
m_pMsgLoopManager	CUsrBizUsingMsgLoop.h	/^	CMsgLoopManager * m_pMsgLoopManager;$/;"	m	class:CUsrBizUsingMsgLoop	access:private
m_pMsgObserver	CMsgLoopManager.h	/^	CMsgObserver * m_pMsgObserver;$/;"	m	class:CMsgLoopManager	access:protected
m_pMsgQueue	CCommunicationByMsgQueue.h	/^	CUsrDefMsgQueue * m_pMsgQueue;$/;"	m	class:CCommunicationByMsgQueue	access:private
m_pMutex	CEnterCriticalSection.h	/^	CMutex * m_pMutex;$/;"	m	class:CEnterCriticalSection	access:private
m_pNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer * CCommunicationNameServer::m_pNameServer = 0;$/;"	m	class:CCommunicationNameServer	file:
m_pNameServer	CCommunicationNameServer.h	/^	static CCommunicationNameServer * m_pNameServer; 	$/;"	m	class:CCommunicationNameServer	access:private
m_pQueue	CMsgLoopMgrUsingUsrDefQueue.h	/^	CUsrDefMsgQueue * m_pQueue;$/;"	m	class:CMsgLoopMgrUsingUsrDefQueue	access:private
m_pQueueSpace	CUsrDefMsgQueue.h	/^	CMessage ** m_pQueueSpace;$/;"	m	class:CUsrDefMsgQueue	access:private
m_pThread	CThreadUsingMsgLoop.h	/^	CThread * m_pThread;$/;"	m	class:CThreadUsingMsgLoop	access:private
m_pUsrBiz	CUseMsgLoopWithoutThread.h	/^	CUsrBizForExecObj * m_pUsrBiz;$/;"	m	class:CUseMsgLoopWithoutThread	access:private
m_pUsrBizForExecObj	CExecutiveObject.h	/^	CUsrBizForExecObj * m_pUsrBizForExecObj;$/;"	m	class:CExecutiveObject	access:protected
m_strThreadName	CMsgLoopMgrUsingUsrDefQueue.h	/^	std::string m_strThreadName;$/;"	m	class:CMsgLoopMgrUsingUsrDefQueue	access:private
main	test.cpp	/^int main()$/;"	f	signature:()
operator =	CMessage.h	/^	CMessage & operator=(const CMessage & cm);$/;"	p	class:CMessage	access:public	signature:(const CMessage & cm)
operator =	IUsrBizForExecObj.h	/^	CUsrBizForExecObj & operator = (const CUsrBizForExecObj &);$/;"	p	class:CUsrBizForExecObj	access:private	signature:(const CUsrBizForExecObj &)
pCommObj	CCommunicationNameServer.h	/^	ICommunicationObject * pCommObj;$/;"	m	struct:__anon2	access:public
pContext	CThreadUsingMsgLoop.h	/^	void * pContext;$/;"	m	struct:__anon1	access:public
pNotifier	CThreadUsingMsgLoop.h	/^ 	CThreadInitFinishedNotifier *  pNotifier;$/;"	m	struct:__anon1	access:public
~CCommunicationByMsgQueue	CCommunicationByMsgQueue.cpp	/^CCommunicationByMsgQueue:: ~CCommunicationByMsgQueue()$/;"	f	class:CCommunicationByMsgQueue	signature:()
~CCommunicationByMsgQueue	CCommunicationByMsgQueue.h	/^	virtual ~CCommunicationByMsgQueue();$/;"	p	class:CCommunicationByMsgQueue	access:public	signature:()
~CCommunicationNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer::~CCommunicationNameServer()$/;"	f	class:CCommunicationNameServer	signature:()
~CCommunicationNameServer	CCommunicationNameServer.h	/^	~CCommunicationNameServer();$/;"	p	class:CCommunicationNameServer	access:private	signature:()
~CConditionVariable	CConditionVariable.h	/^	virtual ~CConditionVariable();$/;"	p	class:CConditionVariable	access:public	signature:()
~CConditionVariable	src/CConditionVariable.cpp	/^CConditionVariable::~CConditionVariable()$/;"	f	class:CConditionVariable	signature:()
~CEnterCriticalSection	CEnterCriticalSection.h	/^	virtual ~CEnterCriticalSection();$/;"	p	class:CEnterCriticalSection	access:public	signature:()
~CEnterCriticalSection	src/CEnterCriticalSection.cpp	/^CEnterCriticalSection::~CEnterCriticalSection()$/;"	f	class:CEnterCriticalSection	signature:()
~CEvent	CEvent.h	/^	~CEvent();$/;"	p	class:CEvent	access:public	signature:()
~CEvent	src/CEvent.cpp	/^CEvent::~CEvent()$/;"	f	class:CEvent	signature:()
~CExecutiveObject	CExecutiveObject.cpp	/^CExecutiveObject::~CExecutiveObject()$/;"	f	class:CExecutiveObject	signature:()
~CExecutiveObject	CExecutiveObject.h	/^	virtual ~CExecutiveObject();$/;"	p	class:CExecutiveObject	access:public	signature:()
~CMessage	CMessage.cpp	/^CMessage:: ~CMessage()$/;"	f	class:CMessage	signature:()
~CMessage	CMessage.h	/^	virtual ~CMessage();$/;"	p	class:CMessage	access:public	signature:()
~CMsgObserver	CMsgObserver.cpp	/^CMsgObserver:: ~CMsgObserver()$/;"	f	class:CMsgObserver	signature:()
~CMsgObserver	CMsgObserver.h	/^	virtual ~CMsgObserver();$/;"	p	class:CMsgObserver	access:public	signature:()
~CMutex	CMutex.h	/^	virtual ~CMutex();$/;"	p	class:CMutex	access:public	signature:()
~CMutex	src/CMutex.cpp	/^CMutex::~CMutex()$/;"	f	class:CMutex	signature:()
~CStatus	CStatus.cpp	/^CStatus::~CStatus()$/;"	f	class:CStatus	signature:()
~CStatus	CStatus.h	/^	virtual ~CStatus();$/;"	p	class:CStatus	access:public	signature:()
~CThread	CThread.cpp	/^CThread::~CThread()$/;"	f	class:CThread	signature:()
~CThread	CThread.h	/^	virtual ~CThread();$/;"	p	class:CThread	access:public	signature:()
~CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.cpp	/^CThreadInitFinishedNotifier::~CThreadInitFinishedNotifier()$/;"	f	class:CThreadInitFinishedNotifier	signature:()
~CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.h	/^	virtual ~CThreadInitFinishedNotifier();$/;"	p	class:CThreadInitFinishedNotifier	access:public	signature:()
~CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: ~CThreadUsingMsgLoop()$/;"	f	class:CThreadUsingMsgLoop	signature:()
~CThreadUsingMsgLoop	CThreadUsingMsgLoop.h	/^	virtual ~CThreadUsingMsgLoop();$/;"	p	class:CThreadUsingMsgLoop	access:public	signature:()
~CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.cpp	/^CUseMsgLoopWithoutThread::~CUseMsgLoopWithoutThread()$/;"	f	class:CUseMsgLoopWithoutThread	signature:()
~CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.h	/^	virtual ~CUseMsgLoopWithoutThread();$/;"	p	class:CUseMsgLoopWithoutThread	access:public	signature:()
~CUsrBizForExecObj	IUsrBizForExecObj.cpp	/^CUsrBizForExecObj::~CUsrBizForExecObj()$/;"	f	class:CUsrBizForExecObj	signature:()
~CUsrBizForExecObj	IUsrBizForExecObj.h	/^	virtual ~CUsrBizForExecObj();$/;"	p	class:CUsrBizForExecObj	access:public	signature:()
~CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.cpp	/^CUsrBizUsingMsgLoop:: ~CUsrBizUsingMsgLoop()$/;"	f	class:CUsrBizUsingMsgLoop	signature:()
~CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.h	/^	virtual ~CUsrBizUsingMsgLoop();$/;"	p	class:CUsrBizUsingMsgLoop	access:public	signature:()
~CUsrDefMsgQueue	CUsrDefMsgQueue.cpp	/^CUsrDefMsgQueue::~CUsrDefMsgQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
~CUsrDefMsgQueue	CUsrDefMsgQueue.h	/^	virtual ~CUsrDefMsgQueue();$/;"	p	class:CUsrDefMsgQueue	access:public	signature:()
~ICommunicationObject	ICommunicationObject.cpp	/^ICommunicationObject:: ~ICommunicationObject()$/;"	f	class:ICommunicationObject	signature:()
~ICommunicationObject	ICommunicationObject.h	/^	virtual ~ICommunicationObject();$/;"	p	class:ICommunicationObject	access:public	signature:()
