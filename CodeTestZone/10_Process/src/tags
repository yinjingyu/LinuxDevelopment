!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CCommunicationByMsgQueue	CCommunicationByMsgQueue.cpp	/^CCommunicationByMsgQueue:: CCommunicationByMsgQueue(CUsrDefMsgQueue * pMsgQueue)$/;"	f	class:CCommunicationByMsgQueue	signature:(CUsrDefMsgQueue * pMsgQueue)
CCommunicationByMsgQueue::CCommunicationByMsgQueue	CCommunicationByMsgQueue.cpp	/^CCommunicationByMsgQueue:: CCommunicationByMsgQueue(CUsrDefMsgQueue * pMsgQueue)$/;"	f	class:CCommunicationByMsgQueue	signature:(CUsrDefMsgQueue * pMsgQueue)
CCommunicationByMsgQueue::PostMessage	CCommunicationByMsgQueue.cpp	/^CStatus CCommunicationByMsgQueue:: PostMessage(CMessage * pMsg)$/;"	f	class:CCommunicationByMsgQueue	signature:(CMessage * pMsg)
CCommunicationByMsgQueue::~CCommunicationByMsgQueue	CCommunicationByMsgQueue.cpp	/^CCommunicationByMsgQueue:: ~CCommunicationByMsgQueue()$/;"	f	class:CCommunicationByMsgQueue	signature:()
CCommunicationNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer:: 	CCommunicationNameServer()$/;"	f	class:CCommunicationNameServer	signature:()
CCommunicationNameServer::CCommunicationNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer:: 	CCommunicationNameServer()$/;"	f	class:CCommunicationNameServer	signature:()
CCommunicationNameServer::GetCommunicationObject	CCommunicationNameServer.cpp	/^ICommunicationObject * CCommunicationNameServer::GetCommunicationObject(const char * strCommObjName)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName)
CCommunicationNameServer::GetInstance	CCommunicationNameServer.cpp	/^CCommunicationNameServer * CCommunicationNameServer:: GetInstance()$/;"	f	class:CCommunicationNameServer	signature:()
CCommunicationNameServer::Register	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer:: Register(const char * strCommObjName, ICommunicationObject * pCommObj)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName, ICommunicationObject * pCommObj)
CCommunicationNameServer::ReleaseCommunicationObject	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer::ReleaseCommunicationObject(const char * strCommObjName)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName)
CCommunicationNameServer::SendMessage	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer::SendMessage(const char * strCommObjName, CMessage * pMessage)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName, CMessage * pMessage)
CCommunicationNameServer::m_MutexForCreatingInstance	CCommunicationNameServer.cpp	/^CMutex CCommunicationNameServer::m_MutexForCreatingInstance;$/;"	m	class:CCommunicationNameServer	file:
CCommunicationNameServer::m_pNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer * CCommunicationNameServer::m_pNameServer = 0;$/;"	m	class:CCommunicationNameServer	file:
CCommunicationNameServer::~CCommunicationNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer::~CCommunicationNameServer()$/;"	f	class:CCommunicationNameServer	signature:()
CConditionVariable	CConditionVariable.cpp	/^CConditionVariable::CConditionVariable()$/;"	f	class:CConditionVariable	signature:()
CConditionVariable	CConditionVariable.cpp	/^CConditionVariable::CConditionVariable(const char * pstrCondName)$/;"	f	class:CConditionVariable	signature:(const char * pstrCondName)
CConditionVariable	CConditionVariable.cpp	/^CConditionVariable::CConditionVariable(pthread_cond_t * pCond)$/;"	f	class:CConditionVariable	signature:(pthread_cond_t * pCond)
CConditionVariable::CConditionVariable	CConditionVariable.cpp	/^CConditionVariable::CConditionVariable()$/;"	f	class:CConditionVariable	signature:()
CConditionVariable::CConditionVariable	CConditionVariable.cpp	/^CConditionVariable::CConditionVariable(const char * pstrCondName)$/;"	f	class:CConditionVariable	signature:(const char * pstrCondName)
CConditionVariable::CConditionVariable	CConditionVariable.cpp	/^CConditionVariable::CConditionVariable(pthread_cond_t * pCond)$/;"	f	class:CConditionVariable	signature:(pthread_cond_t * pCond)
CEnterCriticalSection	CEnterCriticalSection.cpp	/^CEnterCriticalSection::CEnterCriticalSection(CMutex * pMutex)$/;"	f	class:CEnterCriticalSection	signature:(CMutex * pMutex)
CEnterCriticalSection::CEnterCriticalSection	CEnterCriticalSection.cpp	/^CEnterCriticalSection::CEnterCriticalSection(CMutex * pMutex)$/;"	f	class:CEnterCriticalSection	signature:(CMutex * pMutex)
CEnterCriticalSection::~CEnterCriticalSection	CEnterCriticalSection.cpp	/^CEnterCriticalSection::~CEnterCriticalSection()$/;"	f	class:CEnterCriticalSection	signature:()
CEvent	CEvent.cpp	/^CEvent::CEvent()$/;"	f	class:CEvent	signature:()
CEvent::CEvent	CEvent.cpp	/^CEvent::CEvent()$/;"	f	class:CEvent	signature:()
CEvent::Set	CEvent.cpp	/^CStatus CEvent::Set()$/;"	f	class:CEvent	signature:()
CEvent::UseAsRecordCondVar	CEvent.cpp	/^CStatus CEvent::UseAsRecordCondVar(bool b)$/;"	f	class:CEvent	signature:(bool b)
CEvent::Wait	CEvent.cpp	/^CStatus CEvent::Wait()$/;"	f	class:CEvent	signature:()
CEvent::~CEvent	CEvent.cpp	/^CEvent::~CEvent()$/;"	f	class:CEvent	signature:()
CExecutiveObject	CExecutiveObject.cpp	/^CExecutiveObject::CExecutiveObject(IUsrBizForExecObj * pUsrBizForExecObj)$/;"	f	class:CExecutiveObject	signature:(IUsrBizForExecObj * pUsrBizForExecObj)
CExecutiveObject::CExecutiveObject	CExecutiveObject.cpp	/^CExecutiveObject::CExecutiveObject(IUsrBizForExecObj * pUsrBizForExecObj)$/;"	f	class:CExecutiveObject	signature:(IUsrBizForExecObj * pUsrBizForExecObj)
CExecutiveObject::~CExecutiveObject	CExecutiveObject.cpp	/^CExecutiveObject::~CExecutiveObject()$/;"	f	class:CExecutiveObject	signature:()
CMessage	CMessage.cpp	/^CMessage:: CMessage(const CMessage &cm):m_clMsgID(m_lMsgID)$/;"	f	class:CMessage	signature:(const CMessage &cm)
CMessage	CMessage.cpp	/^CMessage::CMessage(unsigned long lMsgID):m_clMsgID(m_lMsgID)$/;"	f	class:CMessage	signature:(unsigned long lMsgID)
CMessage::CMessage	CMessage.cpp	/^CMessage:: CMessage(const CMessage &cm):m_clMsgID(m_lMsgID)$/;"	f	class:CMessage	signature:(const CMessage &cm)
CMessage::CMessage	CMessage.cpp	/^CMessage::CMessage(unsigned long lMsgID):m_clMsgID(m_lMsgID)$/;"	f	class:CMessage	signature:(unsigned long lMsgID)
CMessage::~CMessage	CMessage.cpp	/^CMessage:: ~CMessage()$/;"	f	class:CMessage	signature:()
CMsgLoopManager	CMsgLoopManager.cpp	/^CMsgLoopManager:: CMsgLoopManager(CMsgObserver * pMsgObserver)$/;"	f	class:CMsgLoopManager	signature:(CMsgObserver * pMsgObserver)
CMsgLoopManager::CMsgLoopManager	CMsgLoopManager.cpp	/^CMsgLoopManager:: CMsgLoopManager(CMsgObserver * pMsgObserver)$/;"	f	class:CMsgLoopManager	signature:(CMsgObserver * pMsgObserver)
CMsgLoopManager::DispatchMessage	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::DispatchMessage(CMessage * pMsg)$/;"	f	class:CMsgLoopManager	signature:(CMessage * pMsg)
CMsgLoopManager::EnterMessageLoop	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::EnterMessageLoop(void * pContext)$/;"	f	class:CMsgLoopManager	signature:(void * pContext)
CMsgLoopManager::Register	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::Register(unsigned int iMsgTypeID, CallBackFunctionOfMsgObserver pFunction)$/;"	f	class:CMsgLoopManager	signature:(unsigned int iMsgTypeID, CallBackFunctionOfMsgObserver pFunction)
CMsgLoopManager::~CMsgLoopManager	CMsgLoopManager.cpp	/^CMsgLoopManager:: ~CMsgLoopManager()$/;"	f	class:CMsgLoopManager	signature:()
CMsgLoopMgrUsingUsrDefQueue	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMsgLoopMgrUsingUsrDefQueue::CMsgLoopMgrUsingUsrDefQueue(const char * strThreadName, CMsgObserver *pMsgObserver):CMsgLoopManager(pMsgObserver)$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:(const char * strThreadName, CMsgObserver *pMsgObserver)
CMsgLoopMgrUsingUsrDefQueue::CMsgLoopMgrUsingUsrDefQueue	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMsgLoopMgrUsingUsrDefQueue::CMsgLoopMgrUsingUsrDefQueue(const char * strThreadName, CMsgObserver *pMsgObserver):CMsgLoopManager(pMsgObserver)$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:(const char * strThreadName, CMsgObserver *pMsgObserver)
CMsgLoopMgrUsingUsrDefQueue::Initialize	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CStatus CMsgLoopMgrUsingUsrDefQueue::Initialize()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
CMsgLoopMgrUsingUsrDefQueue::Uninitialize	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CStatus CMsgLoopMgrUsingUsrDefQueue:: Uninitialize()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
CMsgLoopMgrUsingUsrDefQueue::WaitForMessage	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMessage * CMsgLoopMgrUsingUsrDefQueue:: WaitForMessage()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
CMsgLoopMgrUsingUsrDefQueue::~CMsgLoopMgrUsingUsrDefQueue	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMsgLoopMgrUsingUsrDefQueue::~CMsgLoopMgrUsingUsrDefQueue()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
CMsgObserver	CMsgObserver.cpp	/^CMsgObserver:: CMsgObserver()$/;"	f	class:CMsgObserver	signature:()
CMsgObserver::CMsgObserver	CMsgObserver.cpp	/^CMsgObserver:: CMsgObserver()$/;"	f	class:CMsgObserver	signature:()
CMsgObserver::~CMsgObserver	CMsgObserver.cpp	/^CMsgObserver:: ~CMsgObserver()$/;"	f	class:CMsgObserver	signature:()
CMutex	CMutex.cpp	/^CMutex::CMutex()$/;"	f	class:CMutex	signature:()
CMutex	CMutex.cpp	/^CMutex::CMutex(const char * pstrFileName, int nType)$/;"	f	class:CMutex	signature:(const char * pstrFileName, int nType)
CMutex	CMutex.cpp	/^CMutex::CMutex(const char * pstrFileName, pthread_mutex_t * pMutex)$/;"	f	class:CMutex	signature:(const char * pstrFileName, pthread_mutex_t * pMutex)
CMutex	CMutex.cpp	/^CMutex::CMutex(pthread_mutex_t * pMutex)$/;"	f	class:CMutex	signature:(pthread_mutex_t * pMutex)
CMutex::CMutex	CMutex.cpp	/^CMutex::CMutex()$/;"	f	class:CMutex	signature:()
CMutex::CMutex	CMutex.cpp	/^CMutex::CMutex(const char * pstrFileName, int nType)$/;"	f	class:CMutex	signature:(const char * pstrFileName, int nType)
CMutex::CMutex	CMutex.cpp	/^CMutex::CMutex(const char * pstrFileName, pthread_mutex_t * pMutex)$/;"	f	class:CMutex	signature:(const char * pstrFileName, pthread_mutex_t * pMutex)
CMutex::CMutex	CMutex.cpp	/^CMutex::CMutex(pthread_mutex_t * pMutex)$/;"	f	class:CMutex	signature:(pthread_mutex_t * pMutex)
CMutex::Lock	CMutex.cpp	/^CStatus CMutex::Lock()$/;"	f	class:CMutex	signature:()
CMutex::Unlock	CMutex.cpp	/^CStatus CMutex::Unlock()$/;"	f	class:CMutex	signature:()
CMutex::~CMutex	CMutex.cpp	/^CMutex::~CMutex()$/;"	f	class:CMutex	signature:()
CMutexByPThread	CMutexByPThread.cpp	/^CMutexByPThread :: CMutexByPThread()$/;"	f	class:CMutexByPThread	signature:()
CMutexByPThread	CMutexByPThread.cpp	/^CMutexByPThread :: CMutexByPThread(pthread_mutex_t * pMutex)$/;"	f	class:CMutexByPThread	signature:(pthread_mutex_t * pMutex)
CMutexByPThread::CMutexByPThread	CMutexByPThread.cpp	/^CMutexByPThread :: CMutexByPThread()$/;"	f	class:CMutexByPThread	signature:()
CMutexByPThread::CMutexByPThread	CMutexByPThread.cpp	/^CMutexByPThread :: CMutexByPThread(pthread_mutex_t * pMutex)$/;"	f	class:CMutexByPThread	signature:(pthread_mutex_t * pMutex)
CMutexByPThread::GetMutexPointer	CMutexByPThread.cpp	/^pthread_mutex_t * CMutexByPThread :: GetMutexPointer()$/;"	f	class:CMutexByPThread	signature:()
CMutexByPThread::Initialize	CMutexByPThread.cpp	/^CStatus CMutexByPThread :: Initialize()$/;"	f	class:CMutexByPThread	signature:()
CMutexByPThread::Lock	CMutexByPThread.cpp	/^CStatus CMutexByPThread :: Lock()$/;"	f	class:CMutexByPThread	signature:()
CMutexByPThread::Uninitialize	CMutexByPThread.cpp	/^CStatus CMutexByPThread :: Uninitialize()$/;"	f	class:CMutexByPThread	signature:()
CMutexByPThread::Unlock	CMutexByPThread.cpp	/^CStatus CMutexByPThread :: Unlock()$/;"	f	class:CMutexByPThread	signature:()
CMutexByPThread::~CMutexByPThread	CMutexByPThread.cpp	/^CMutexByPThread :: ~CMutexByPThread()$/;"	f	class:CMutexByPThread	signature:()
CMutexByRecordLocking	CMutexByRecordLocking.cpp	/^CMutexByRecordLocking :: CMutexByRecordLocking(const char * pstrFileName)$/;"	f	class:CMutexByRecordLocking	signature:(const char * pstrFileName)
CMutexByRecordLocking::CMutexByRecordLocking	CMutexByRecordLocking.cpp	/^CMutexByRecordLocking :: CMutexByRecordLocking(const char * pstrFileName)$/;"	f	class:CMutexByRecordLocking	signature:(const char * pstrFileName)
CMutexByRecordLocking::Initialize	CMutexByRecordLocking.cpp	/^CStatus CMutexByRecordLocking :: Initialize()$/;"	f	class:CMutexByRecordLocking	signature:()
CMutexByRecordLocking::Lock	CMutexByRecordLocking.cpp	/^CStatus CMutexByRecordLocking :: Lock()$/;"	f	class:CMutexByRecordLocking	signature:()
CMutexByRecordLocking::Uninitialize	CMutexByRecordLocking.cpp	/^CStatus CMutexByRecordLocking :: Uninitialize()$/;"	f	class:CMutexByRecordLocking	signature:()
CMutexByRecordLocking::Unlock	CMutexByRecordLocking.cpp	/^CStatus CMutexByRecordLocking :: Unlock()$/;"	f	class:CMutexByRecordLocking	signature:()
CMutexByRecordLocking::~CMutexByRecordLocking	CMutexByRecordLocking.cpp	/^CMutexByRecordLocking :: ~CMutexByRecordLocking()$/;"	f	class:CMutexByRecordLocking	signature:()
CMutexByRecordLockingAndPThread	CMutexByRecordLockingAndPThread.cpp	/^CMutexByRecordLockingAndPThread :: CMutexByRecordLockingAndPThread(const char * pstrFileName) :$/;"	f	class:CMutexByRecordLockingAndPThread	signature:(const char * pstrFileName)
CMutexByRecordLockingAndPThread	CMutexByRecordLockingAndPThread.cpp	/^CMutexByRecordLockingAndPThread :: CMutexByRecordLockingAndPThread(const char * pstrFileName, pthread_mutex_t * pMutex) :$/;"	f	class:CMutexByRecordLockingAndPThread	signature:(const char * pstrFileName, pthread_mutex_t * pMutex)
CMutexByRecordLockingAndPThread::CMutexByRecordLockingAndPThread	CMutexByRecordLockingAndPThread.cpp	/^CMutexByRecordLockingAndPThread :: CMutexByRecordLockingAndPThread(const char * pstrFileName) :$/;"	f	class:CMutexByRecordLockingAndPThread	signature:(const char * pstrFileName)
CMutexByRecordLockingAndPThread::CMutexByRecordLockingAndPThread	CMutexByRecordLockingAndPThread.cpp	/^CMutexByRecordLockingAndPThread :: CMutexByRecordLockingAndPThread(const char * pstrFileName, pthread_mutex_t * pMutex) :$/;"	f	class:CMutexByRecordLockingAndPThread	signature:(const char * pstrFileName, pthread_mutex_t * pMutex)
CMutexByRecordLockingAndPThread::Initialize	CMutexByRecordLockingAndPThread.cpp	/^CStatus CMutexByRecordLockingAndPThread :: Initialize()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
CMutexByRecordLockingAndPThread::Lock	CMutexByRecordLockingAndPThread.cpp	/^CStatus CMutexByRecordLockingAndPThread :: Lock()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
CMutexByRecordLockingAndPThread::Uninitialize	CMutexByRecordLockingAndPThread.cpp	/^CStatus CMutexByRecordLockingAndPThread :: Uninitialize()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
CMutexByRecordLockingAndPThread::Unlock	CMutexByRecordLockingAndPThread.cpp	/^CStatus CMutexByRecordLockingAndPThread :: Unlock()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
CMutexByRecordLockingAndPThread::~CMutexByRecordLockingAndPThread	CMutexByRecordLockingAndPThread.cpp	/^CMutexByRecordLockingAndPThread :: ~CMutexByRecordLockingAndPThread()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
CMutexBySharedPThread	CMutexBySharedPThread.cpp	/^CMutexBySharedPThread::CMutexBySharedPThread(const char *pstrMutexName)$/;"	f	class:CMutexBySharedPThread	signature:(const char *pstrMutexName)
CMutexBySharedPThread::CMutexBySharedPThread	CMutexBySharedPThread.cpp	/^CMutexBySharedPThread::CMutexBySharedPThread(const char *pstrMutexName)$/;"	f	class:CMutexBySharedPThread	signature:(const char *pstrMutexName)
CMutexBySharedPThread::GetMutexPointer	CMutexBySharedPThread.cpp	/^pthread_mutex_t *CMutexBySharedPThread::GetMutexPointer()$/;"	f	class:CMutexBySharedPThread	signature:()
CMutexBySharedPThread::Initialize	CMutexBySharedPThread.cpp	/^CStatus CMutexBySharedPThread::Initialize()$/;"	f	class:CMutexBySharedPThread	signature:()
CMutexBySharedPThread::Lock	CMutexBySharedPThread.cpp	/^CStatus CMutexBySharedPThread::Lock()$/;"	f	class:CMutexBySharedPThread	signature:()
CMutexBySharedPThread::Uninitialize	CMutexBySharedPThread.cpp	/^CStatus CMutexBySharedPThread::Uninitialize()$/;"	f	class:CMutexBySharedPThread	signature:()
CMutexBySharedPThread::Unlock	CMutexBySharedPThread.cpp	/^CStatus CMutexBySharedPThread::Unlock()$/;"	f	class:CMutexBySharedPThread	signature:()
CMutexBySharedPThread::~CMutexBySharedPThread	CMutexBySharedPThread.cpp	/^CMutexBySharedPThread::~CMutexBySharedPThread()$/;"	f	class:CMutexBySharedPThread	signature:()
CMutexInterface	CMutexInterface.cpp	/^CMutexInterface :: CMutexInterface()$/;"	f	class:CMutexInterface	signature:()
CMutexInterface::CMutexInterface	CMutexInterface.cpp	/^CMutexInterface :: CMutexInterface()$/;"	f	class:CMutexInterface	signature:()
CMutexInterface::~CMutexInterface	CMutexInterface.cpp	/^CMutexInterface::~CMutexInterface()$/;"	f	class:CMutexInterface	signature:()
CProcess	CProcess.cpp	/^CProcess::CProcess(IUsrBizForExecObj * pUsrBizForExecObj):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CProcess	signature:(IUsrBizForExecObj * pUsrBizForExecObj)
CProcess	CProcess.cpp	/^CProcess::CProcess(IUsrBizForExecObj * pUsrBizForExecObj, bool bWaitForDeath):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CProcess	signature:(IUsrBizForExecObj * pUsrBizForExecObj, bool bWaitForDeath)
CProcess::CProcess	CProcess.cpp	/^CProcess::CProcess(IUsrBizForExecObj * pUsrBizForExecObj):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CProcess	signature:(IUsrBizForExecObj * pUsrBizForExecObj)
CProcess::CProcess	CProcess.cpp	/^CProcess::CProcess(IUsrBizForExecObj * pUsrBizForExecObj, bool bWaitForDeath):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CProcess	signature:(IUsrBizForExecObj * pUsrBizForExecObj, bool bWaitForDeath)
CProcess::CloseFileDescriptor	CProcess.cpp	/^CStatus CProcess::CloseFileDescriptor()$/;"	f	class:CProcess	signature:()
CProcess::Run	CProcess.cpp	/^CStatus CProcess :: Run(void * pstrCmdLine)$/;"	f	class:CProcess	signature:(void * pstrCmdLine)
CProcess::RunBizOfChildProcess	CProcess.cpp	/^void CProcess :: RunBizOfChildProcess(void * pstrCmdLine)$/;"	f	class:CProcess	signature:(void * pstrCmdLine)
CProcess::WaitForDeath	CProcess.cpp	/^CStatus CProcess :: WaitForDeath()$/;"	f	class:CProcess	signature:()
CProcess::~CProcess	CProcess.cpp	/^CProcess::~CProcess()$/;"	f	class:CProcess	signature:()
CSharedCondVarManager	CSharedCondVarManager.cpp	/^CSharedCondVarManager::CSharedCondVarManager()$/;"	f	class:CSharedCondVarManager	signature:()
CSharedCondVarManager::CSharedCondVarManager	CSharedCondVarManager.cpp	/^CSharedCondVarManager::CSharedCondVarManager()$/;"	f	class:CSharedCondVarManager	signature:()
CSharedCondVarManager::Create	CSharedCondVarManager.cpp	/^CStaus CSharedCondVarManager::Create()$/;"	f	class:CSharedCondVarManager	signature:()
CSharedCondVarManager::Destroy	CSharedCondVarManager.cpp	/^CStaus CSharedCondVarManager::Destroy()$/;"	f	class:CSharedCondVarManager	signature:()
CSharedCondVarManager::Get	CSharedCondVarManager.cpp	/^pthread_cond_t* CSharedCondVarManager::Get(const char *pstrCondName)$/;"	f	class:CSharedCondVarManager	signature:(const char *pstrCondName)
CSharedCondVarManager::GetInstance	CSharedCondVarManager.cpp	/^CSharedCondVarManager* CSharedCondVarManager::GetInstance()$/;"	f	class:CSharedCondVarManager	signature:()
CSharedCondVarManager::GetSharedCond	CSharedCondVarManager.cpp	/^pthread_cond_t *CSharedCondVarManager::GetSharedCond(const char *pstrCondName)$/;"	f	class:CSharedCondVarManager	signature:(const char *pstrCondName)
CSharedCondVarManager::Release	CSharedCondVarManager.cpp	/^CStaus CSharedCondVarManager::Release(const char *pstrCondName)$/;"	f	class:CSharedCondVarManager	signature:(const char *pstrCondName)
CSharedCondVarManager::ReleaseSharedCond	CSharedCondVarManager.cpp	/^CStaus CSharedCondVarManager::ReleaseSharedCond(const char *pstrCondName)$/;"	f	class:CSharedCondVarManager	signature:(const char *pstrCondName)
CSharedCondVarManager::~CSharedCondVarManager	CSharedCondVarManager.cpp	/^CSharedCondVarManager::~CSharedCondVarManager()$/;"	f	class:CSharedCondVarManager	signature:()
CSharedConditionVariablePool	CSharedConditionVariablePool.cpp	/^CSharedConditionVariablePool::CSharedConditionVariablePool()$/;"	f	class:CSharedConditionVariablePool	signature:()
CSharedConditionVariablePool::CSharedConditionVariablePool	CSharedConditionVariablePool.cpp	/^CSharedConditionVariablePool::CSharedConditionVariablePool()$/;"	f	class:CSharedConditionVariablePool	signature:()
CSharedConditionVariablePool::DestroySharedObject	CSharedConditionVariablePool.cpp	/^CStatus CSharedConditionVariablePool::DestroySharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedConditionVariablePool	signature:(SSharedObjectHead *pObject)
CSharedConditionVariablePool::InitializeSharedObject	CSharedConditionVariablePool.cpp	/^CStatus CSharedConditionVariablePool::InitializeSharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedConditionVariablePool	signature:(SSharedObjectHead *pObject)
CSharedConditionVariablePool::~CSharedConditionVariablePool	CSharedConditionVariablePool.cpp	/^CSharedConditionVariablePool::~CSharedConditionVariablePool()$/;"	f	class:CSharedConditionVariablePool	signature:()
CSharedEventManager	CSharedEventManager.cpp	/^CSharedEventManager::CSharedEventManager()$/;"	f	class:CSharedEventManager	signature:()
CSharedEventManager::CSharedEventManager	CSharedEventManager.cpp	/^CSharedEventManager::CSharedEventManager()$/;"	f	class:CSharedEventManager	signature:()
CSharedEventManager::Create	CSharedEventManager.cpp	/^CStatus CSharedEventManager::Create()$/;"	f	class:CSharedEventManager	signature:()
CSharedEventManager::Destroy	CSharedEventManager.cpp	/^CStatus CSharedEventManager::Destroy()$/;"	f	class:CSharedEventManager	signature:()
CSharedEventManager::Get	CSharedEventManager.cpp	/^SEventInfo* CSharedEventManager::Get(const char *pstrEventName)$/;"	f	class:CSharedEventManager	signature:(const char *pstrEventName)
CSharedEventManager::GetASharedEventInfo	CSharedEventManager.cpp	/^SEventInfo *CSharedEventManager::GetASharedEventInfo(const char *pstrEventName)$/;"	f	class:CSharedEventManager	signature:(const char *pstrEventName)
CSharedEventManager::GetInstance	CSharedEventManager.cpp	/^CSharedEventManager* CSharedEventManager::GetInstance()$/;"	f	class:CSharedEventManager	signature:()
CSharedEventManager::Release	CSharedEventManager.cpp	/^CStatus CSharedEventManager::Release(const char *pstrEventName)$/;"	f	class:CSharedEventManager	signature:(const char *pstrEventName)
CSharedEventManager::ReleaseAEventInfo	CSharedEventManager.cpp	/^CStatus CSharedEventManager::ReleaseAEventInfo(const char *pstrEventName)$/;"	f	class:CSharedEventManager	signature:(const char *pstrEventName)
CSharedEventManager::~CSharedEventManager	CSharedEventManager.cpp	/^CSharedEventManager::~CSharedEventManager()$/;"	f	class:CSharedEventManager	signature:()
CSharedEventPool	CSharedEventPool.cpp	/^CSharedEventPool::CSharedEventPool()$/;"	f	class:CSharedEventPool	signature:()
CSharedEventPool::CSharedEventPool	CSharedEventPool.cpp	/^CSharedEventPool::CSharedEventPool()$/;"	f	class:CSharedEventPool	signature:()
CSharedEventPool::DestroySharedObject	CSharedEventPool.cpp	/^CStatus CSharedEventPool::DestroySharedObject(SLSharedObjectHead *pObject)$/;"	f	class:CSharedEventPool	signature:(SLSharedObjectHead *pObject)
CSharedEventPool::InitializeSharedObject	CSharedEventPool.cpp	/^CStatus CSharedEventPool::InitializeSharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedEventPool	signature:(SSharedObjectHead *pObject)
CSharedEventPool::~CSharedEventPool	CSharedEventPool.cpp	/^CSharedEventPool::~CSharedEventPool()$/;"	f	class:CSharedEventPool	signature:()
CSharedMemory	CSharedMemory.cpp	/^CSharedMemory :: CSharedMemory(const char * pstrFileName, size_t nSize) : m_Mutex(pstrFileName,MUTEX_USE_RECORD_LOCK)$/;"	f	class:CSharedMemory	signature:(const char * pstrFileName, size_t nSize)
CSharedMemory::CSharedMemory	CSharedMemory.cpp	/^CSharedMemory :: CSharedMemory(const char * pstrFileName, size_t nSize) : m_Mutex(pstrFileName,MUTEX_USE_RECORD_LOCK)$/;"	f	class:CSharedMemory	signature:(const char * pstrFileName, size_t nSize)
CSharedMemory::DeleteSharedMemory	CSharedMemory.cpp	/^CStatus CSharedMemory :: DeleteSharedMemory()$/;"	f	class:CSharedMemory	signature:()
CSharedMemory::GetAddress	CSharedMemory.cpp	/^void * CSharedMemory :: GetAddress()$/;"	f	class:CSharedMemory	signature:()
CSharedMemory::GetRefCount	CSharedMemory.cpp	/^int CSharedMemory :: GetRefCount()$/;"	f	class:CSharedMemory	signature:()
CSharedMemory::~CSharedMemory	CSharedMemory.cpp	/^CSharedMemory :: ~CSharedMemory()$/;"	f	class:CSharedMemory	signature:()
CSharedMutexPool	CSharedMutexPool.cpp	/^CSharedMutexPool::CSharedMutexPool()$/;"	f	class:CSharedMutexPool	signature:()
CSharedMutexPool::CSharedMutexPool	CSharedMutexPool.cpp	/^CSharedMutexPool::CSharedMutexPool()$/;"	f	class:CSharedMutexPool	signature:()
CSharedMutexPool::DestroyASharedObject	CSharedMutexPool.cpp	/^CStatus CSharedMutexPool::DestroyASharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedMutexPool	signature:(SSharedObjectHead *pObject)
CSharedMutexPool::InitializeASharedObject	CSharedMutexPool.cpp	/^CStatus CSharedMutexPool::InitializeASharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedMutexPool	signature:(SSharedObjectHead *pObject)
CSharedMutexPool::~CSharedMutexPool	CSharedMutexPool.cpp	/^CSharedMutexPool::~CSharedMutexPool()$/;"	f	class:CSharedMutexPool	signature:()
CSharedMutexPoolManager	CSharedMutexPoolManager.cpp	/^CSharedMutexPoolManager:: CSharedMutexPoolManager()$/;"	f	class:CSharedMutexPoolManager	signature:()
CSharedMutexPoolManager::CSharedMutexPoolManager	CSharedMutexPoolManager.cpp	/^CSharedMutexPoolManager:: CSharedMutexPoolManager()$/;"	f	class:CSharedMutexPoolManager	signature:()
CSharedMutexPoolManager::Create	CSharedMutexPoolManager.cpp	/^CStatus CSharedMutexPoolManager::Create()$/;"	f	class:CSharedMutexPoolManager	signature:()
CSharedMutexPoolManager::Destroy	CSharedMutexPoolManager.cpp	/^CStatus CSharedMutexPoolManager::Destroy()$/;"	f	class:CSharedMutexPoolManager	signature:()
CSharedMutexPoolManager::Get	CSharedMutexPoolManager.cpp	/^pthread_mutex_t* CSharedMutexPoolManager::Get(const char *pstrMutexName)$/;"	f	class:CSharedMutexPoolManager	signature:(const char *pstrMutexName)
CSharedMutexPoolManager::GetASharedMutex	CSharedMutexPoolManager.cpp	/^pthread_mutex_t *CSharedMutexPoolManager::GetASharedMutex(const char *pstrMutexName)$/;"	f	class:CSharedMutexPoolManager	signature:(const char *pstrMutexName)
CSharedMutexPoolManager::GetInstance	CSharedMutexPoolManager.cpp	/^CSharedMutexPoolManager* CSharedMutexPoolManager::GetInstance()$/;"	f	class:CSharedMutexPoolManager	signature:()
CSharedMutexPoolManager::Release	CSharedMutexPoolManager.cpp	/^CStatus CSharedMutexPoolManager::Release(const char *pstrMutexName)$/;"	f	class:CSharedMutexPoolManager	signature:(const char *pstrMutexName)
CSharedMutexPoolManager::ReleaseASharedMutex	CSharedMutexPoolManager.cpp	/^CStatus CSharedMutexPoolManager::ReleaseASharedMutex(const char *pstrMutexName)$/;"	f	class:CSharedMutexPoolManager	signature:(const char *pstrMutexName)
CSharedMutexPoolManager::m_pShMutexPoolMgr	CSharedMutexPoolManager.cpp	/^CSharedMutexPoolManager *CSharedMutexPoolManager :: m_pShMutexPoolMgr = 0;$/;"	m	class:CSharedMutexPoolManager	file:
CSharedMutexPoolManager::~CSharedMutexPoolManager	CSharedMutexPoolManager.cpp	/^CSharedMutexPoolManager::~CSharedMutexPoolManager()$/;"	f	class:CSharedMutexPoolManager	signature:()
CStatus	CStatus.cpp	/^CStatus::CStatus(const CStatus & sta):m_ciReturnCode(m_iReturnCode), m_ciErrorCode(m_iErrorCode)$/;"	f	class:CStatus	signature:(const CStatus & sta)
CStatus	CStatus.cpp	/^CStatus::CStatus(int iReturnCode, int iErrorCode):m_ciReturnCode(m_iReturnCode),m_ciErrorCode(m_iErrorCode)$/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode)
CStatus	CStatus.cpp	/^CStatus::CStatus(int iReturnCode, int iErrorCode, const char * pErrorMsg):m_ciReturnCode(m_iReturnCode)$/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
CStatus::CStatus	CStatus.cpp	/^CStatus::CStatus(const CStatus & sta):m_ciReturnCode(m_iReturnCode), m_ciErrorCode(m_iErrorCode)$/;"	f	class:CStatus	signature:(const CStatus & sta)
CStatus::CStatus	CStatus.cpp	/^CStatus::CStatus(int iReturnCode, int iErrorCode):m_ciReturnCode(m_iReturnCode),m_ciErrorCode(m_iErrorCode)$/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode)
CStatus::CStatus	CStatus.cpp	/^CStatus::CStatus(int iReturnCode, int iErrorCode, const char * pErrorMsg):m_ciReturnCode(m_iReturnCode)$/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
CStatus::GetErrorMsg	CStatus.cpp	/^char * CStatus::GetErrorMsg()$/;"	f	class:CStatus	signature:()
CStatus::InitializeMemberVars	CStatus.cpp	/^void CStatus::InitializeMemberVars(int iReturnCode, int iErrorCode, const char * pErrorMsg) $/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
CStatus::IsSuccess	CStatus.cpp	/^bool CStatus::IsSuccess()$/;"	f	class:CStatus	signature:()
CStatus::~CStatus	CStatus.cpp	/^CStatus::~CStatus()$/;"	f	class:CStatus	signature:()
CThread	CThread.cpp	/^CThread::CThread(IUsrBizForExecObj * pUsrBizForExecObj):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CThread	signature:(IUsrBizForExecObj * pUsrBizForExecObj)
CThread	CThread.cpp	/^CThread::CThread(IUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CThread	signature:(IUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath)
CThread::CThread	CThread.cpp	/^CThread::CThread(IUsrBizForExecObj * pUsrBizForExecObj):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CThread	signature:(IUsrBizForExecObj * pUsrBizForExecObj)
CThread::CThread	CThread.cpp	/^CThread::CThread(IUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath):CExecutiveObject(pUsrBizForExecObj)$/;"	f	class:CThread	signature:(IUsrBizForExecObj * pUsrBizForExecObj,bool bWaitForDeath)
CThread::Run	CThread.cpp	/^CStatus CThread::Run(void * pContext)$/;"	f	class:CThread	signature:(void * pContext)
CThread::StartFunctionOfThread	CThread.cpp	/^void * CThread::StartFunctionOfThread(void * pThis)$/;"	f	class:CThread	signature:(void * pThis)
CThread::WaitForDeath	CThread.cpp	/^CStatus CThread::WaitForDeath()$/;"	f	class:CThread	signature:()
CThread::~CThread	CThread.cpp	/^CThread::~CThread()$/;"	f	class:CThread	signature:()
CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.cpp	/^CThreadInitFinishedNotifier::CThreadInitFinishedNotifier(CEvent * pEvent)$/;"	f	class:CThreadInitFinishedNotifier	signature:(CEvent * pEvent)
CThreadInitFinishedNotifier::CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.cpp	/^CThreadInitFinishedNotifier::CThreadInitFinishedNotifier(CEvent * pEvent)$/;"	f	class:CThreadInitFinishedNotifier	signature:(CEvent * pEvent)
CThreadInitFinishedNotifier::IsInitialSuccess	CThreadInitFinishedNotifier.cpp	/^bool CThreadInitFinishedNotifier::IsInitialSuccess()$/;"	f	class:CThreadInitFinishedNotifier	signature:()
CThreadInitFinishedNotifier::NotifyInitialFinished	CThreadInitFinishedNotifier.cpp	/^CStatus CThreadInitFinishedNotifier:: NotifyInitialFinished(bool bIsSuccess)$/;"	f	class:CThreadInitFinishedNotifier	signature:(bool bIsSuccess)
CThreadInitFinishedNotifier::~CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.cpp	/^CThreadInitFinishedNotifier::~CThreadInitFinishedNotifier()$/;"	f	class:CThreadInitFinishedNotifier	signature:()
CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: CThreadUsingMsgLoop(const char * strThreadName,CMsgObserver * pMsgObserver)$/;"	f	class:CThreadUsingMsgLoop	signature:(const char * strThreadName,CMsgObserver * pMsgObserver)
CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: CThreadUsingMsgLoop(const char * strThreadName,CMsgObserver * pMsgObserver,bool bWaitForDeath)$/;"	f	class:CThreadUsingMsgLoop	signature:(const char * strThreadName,CMsgObserver * pMsgObserver,bool bWaitForDeath)
CThreadUsingMsgLoop::CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: CThreadUsingMsgLoop(const char * strThreadName,CMsgObserver * pMsgObserver)$/;"	f	class:CThreadUsingMsgLoop	signature:(const char * strThreadName,CMsgObserver * pMsgObserver)
CThreadUsingMsgLoop::CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: CThreadUsingMsgLoop(const char * strThreadName,CMsgObserver * pMsgObserver,bool bWaitForDeath)$/;"	f	class:CThreadUsingMsgLoop	signature:(const char * strThreadName,CMsgObserver * pMsgObserver,bool bWaitForDeath)
CThreadUsingMsgLoop::Run	CThreadUsingMsgLoop.cpp	/^CStatus CThreadUsingMsgLoop::Run(void * pContext)$/;"	f	class:CThreadUsingMsgLoop	signature:(void * pContext)
CThreadUsingMsgLoop::~CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: ~CThreadUsingMsgLoop()$/;"	f	class:CThreadUsingMsgLoop	signature:()
CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.cpp	/^CUseMsgLoopWithoutThread::CUseMsgLoopWithoutThread(const char * strThreadName, CMsgObserver * pMsgObserver)$/;"	f	class:CUseMsgLoopWithoutThread	signature:(const char * strThreadName, CMsgObserver * pMsgObserver)
CUseMsgLoopWithoutThread::CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.cpp	/^CUseMsgLoopWithoutThread::CUseMsgLoopWithoutThread(const char * strThreadName, CMsgObserver * pMsgObserver)$/;"	f	class:CUseMsgLoopWithoutThread	signature:(const char * strThreadName, CMsgObserver * pMsgObserver)
CUseMsgLoopWithoutThread::Run	CUseMsgLoopWithoutThread.cpp	/^CStatus CUseMsgLoopWithoutThread::Run(void * pContext)$/;"	f	class:CUseMsgLoopWithoutThread	signature:(void * pContext)
CUseMsgLoopWithoutThread::~CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.cpp	/^CUseMsgLoopWithoutThread::~CUseMsgLoopWithoutThread()$/;"	f	class:CUseMsgLoopWithoutThread	signature:()
CUsrBizForProcess	CUsrBizForProcess.cpp	/^CUsrBizForProcess :: CUsrBizForProcess()$/;"	f	class:CUsrBizForProcess	signature:()
CUsrBizForProcess::CUsrBizForProcess	CUsrBizForProcess.cpp	/^CUsrBizForProcess :: CUsrBizForProcess()$/;"	f	class:CUsrBizForProcess	signature:()
CUsrBizForProcess::RunClientBusiness	CUsrBizForProcess.cpp	/^CStatus CUsrBizForProcess :: RunClientBusiness(void * pCmdLine)$/;"	f	class:CUsrBizForProcess	signature:(void * pCmdLine)
CUsrBizForProcess::SetWorkDirectory	CUsrBizForProcess.cpp	/^CStatus CUsrBizForProcess :: SetWorkDirectory(char * pstrArgv0)$/;"	f	class:CUsrBizForProcess	signature:(char * pstrArgv0)
CUsrBizForProcess::~CUsrBizForProcess	CUsrBizForProcess.cpp	/^CUsrBizForProcess :: ~CUsrBizForProcess()$/;"	f	class:CUsrBizForProcess	signature:()
CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.cpp	/^CUsrBizUsingMsgLoop::CUsrBizUsingMsgLoop(CMsgLoopManager *pMsgLoopManager)$/;"	f	class:CUsrBizUsingMsgLoop	signature:(CMsgLoopManager *pMsgLoopManager)
CUsrBizUsingMsgLoop::CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.cpp	/^CUsrBizUsingMsgLoop::CUsrBizUsingMsgLoop(CMsgLoopManager *pMsgLoopManager)$/;"	f	class:CUsrBizUsingMsgLoop	signature:(CMsgLoopManager *pMsgLoopManager)
CUsrBizUsingMsgLoop::RunClientBusiness	CUsrBizUsingMsgLoop.cpp	/^CStatus CUsrBizUsingMsgLoop::RunClientBusiness(void *pContext)$/;"	f	class:CUsrBizUsingMsgLoop	signature:(void *pContext)
CUsrBizUsingMsgLoop::~CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.cpp	/^CUsrBizUsingMsgLoop:: ~CUsrBizUsingMsgLoop()$/;"	f	class:CUsrBizUsingMsgLoop	signature:()
CUsrDefMsgQueue	CUsrDefMsgQueue.cpp	/^CUsrDefMsgQueue::CUsrDefMsgQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::CUsrDefMsgQueue	CUsrDefMsgQueue.cpp	/^CUsrDefMsgQueue::CUsrDefMsgQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::EnlargeQueue	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::EnlargeQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::GetMessage	CUsrDefMsgQueue.cpp	/^CMessage * CUsrDefMsgQueue::GetMessage()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::IsEmpty	CUsrDefMsgQueue.cpp	/^bool CUsrDefMsgQueue::IsEmpty()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::IsFull	CUsrDefMsgQueue.cpp	/^bool CUsrDefMsgQueue::IsFull()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::Pop	CUsrDefMsgQueue.cpp	/^CMessage * CUsrDefMsgQueue::Pop()$/;"	f	class:CUsrDefMsgQueue	signature:()
CUsrDefMsgQueue::Push	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::Push(CMessage * pMsg)$/;"	f	class:CUsrDefMsgQueue	signature:(CMessage * pMsg)
CUsrDefMsgQueue::PushMessage	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::PushMessage(CMessage * pMsg)$/;"	f	class:CUsrDefMsgQueue	signature:(CMessage * pMsg)
CUsrDefMsgQueue::~CUsrDefMsgQueue	CUsrDefMsgQueue.cpp	/^CUsrDefMsgQueue::~CUsrDefMsgQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
CloseFileDescriptor	CProcess.cpp	/^CStatus CProcess::CloseFileDescriptor()$/;"	f	class:CProcess	signature:()
Create	CSharedCondVarManager.cpp	/^CStaus CSharedCondVarManager::Create()$/;"	f	class:CSharedCondVarManager	signature:()
Create	CSharedEventManager.cpp	/^CStatus CSharedEventManager::Create()$/;"	f	class:CSharedEventManager	signature:()
Create	CSharedMutexPoolManager.cpp	/^CStatus CSharedMutexPoolManager::Create()$/;"	f	class:CSharedMutexPoolManager	signature:()
DeleteSharedMemory	CSharedMemory.cpp	/^CStatus CSharedMemory :: DeleteSharedMemory()$/;"	f	class:CSharedMemory	signature:()
Destroy	CSharedCondVarManager.cpp	/^CStaus CSharedCondVarManager::Destroy()$/;"	f	class:CSharedCondVarManager	signature:()
Destroy	CSharedEventManager.cpp	/^CStatus CSharedEventManager::Destroy()$/;"	f	class:CSharedEventManager	signature:()
Destroy	CSharedMutexPoolManager.cpp	/^CStatus CSharedMutexPoolManager::Destroy()$/;"	f	class:CSharedMutexPoolManager	signature:()
Destroy	ISharedObjectPool.cpp	/^CStatus ISharedObjectPool::Destroy()$/;"	f	class:ISharedObjectPool	signature:()
DestroyASharedObject	CSharedMutexPool.cpp	/^CStatus CSharedMutexPool::DestroyASharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedMutexPool	signature:(SSharedObjectHead *pObject)
DestroySharedObject	CSharedConditionVariablePool.cpp	/^CStatus CSharedConditionVariablePool::DestroySharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedConditionVariablePool	signature:(SSharedObjectHead *pObject)
DestroySharedObject	CSharedEventPool.cpp	/^CStatus CSharedEventPool::DestroySharedObject(SLSharedObjectHead *pObject)$/;"	f	class:CSharedEventPool	signature:(SLSharedObjectHead *pObject)
DispatchMessage	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::DispatchMessage(CMessage * pMsg)$/;"	f	class:CMsgLoopManager	signature:(CMessage * pMsg)
EnlargeQueue	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::EnlargeQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
EnterMessageLoop	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::EnterMessageLoop(void * pContext)$/;"	f	class:CMsgLoopManager	signature:(void * pContext)
FILE_PATH_FOR_RECORD_LOCKING	CMutexByRecordLocking.cpp	34;"	d	file:
FILE_PATH_FOR_SHARED_MEMORY	CSharedMemory.cpp	35;"	d	file:
Get	CSharedCondVarManager.cpp	/^pthread_cond_t* CSharedCondVarManager::Get(const char *pstrCondName)$/;"	f	class:CSharedCondVarManager	signature:(const char *pstrCondName)
Get	CSharedEventManager.cpp	/^SEventInfo* CSharedEventManager::Get(const char *pstrEventName)$/;"	f	class:CSharedEventManager	signature:(const char *pstrEventName)
Get	CSharedMutexPoolManager.cpp	/^pthread_mutex_t* CSharedMutexPoolManager::Get(const char *pstrMutexName)$/;"	f	class:CSharedMutexPoolManager	signature:(const char *pstrMutexName)
GetASharedEventInfo	CSharedEventManager.cpp	/^SEventInfo *CSharedEventManager::GetASharedEventInfo(const char *pstrEventName)$/;"	f	class:CSharedEventManager	signature:(const char *pstrEventName)
GetASharedMutex	CSharedMutexPoolManager.cpp	/^pthread_mutex_t *CSharedMutexPoolManager::GetASharedMutex(const char *pstrMutexName)$/;"	f	class:CSharedMutexPoolManager	signature:(const char *pstrMutexName)
GetASharedObject	ISharedObjectPool.cpp	/^void *ISharedObjectPool :: GetASharedObject(const char *pstrSharedObjectName)$/;"	f	class:ISharedObjectPool	signature:(const char *pstrSharedObjectName)
GetAddress	CSharedMemory.cpp	/^void * CSharedMemory :: GetAddress()$/;"	f	class:CSharedMemory	signature:()
GetCommunicationObject	CCommunicationNameServer.cpp	/^ICommunicationObject * CCommunicationNameServer::GetCommunicationObject(const char * strCommObjName)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName)
GetErrorMsg	CStatus.cpp	/^char * CStatus::GetErrorMsg()$/;"	f	class:CStatus	signature:()
GetInstance	CCommunicationNameServer.cpp	/^CCommunicationNameServer * CCommunicationNameServer:: GetInstance()$/;"	f	class:CCommunicationNameServer	signature:()
GetInstance	CSharedCondVarManager.cpp	/^CSharedCondVarManager* CSharedCondVarManager::GetInstance()$/;"	f	class:CSharedCondVarManager	signature:()
GetInstance	CSharedEventManager.cpp	/^CSharedEventManager* CSharedEventManager::GetInstance()$/;"	f	class:CSharedEventManager	signature:()
GetInstance	CSharedMutexPoolManager.cpp	/^CSharedMutexPoolManager* CSharedMutexPoolManager::GetInstance()$/;"	f	class:CSharedMutexPoolManager	signature:()
GetMessage	CUsrDefMsgQueue.cpp	/^CMessage * CUsrDefMsgQueue::GetMessage()$/;"	f	class:CUsrDefMsgQueue	signature:()
GetMutexPointer	CMutexByPThread.cpp	/^pthread_mutex_t * CMutexByPThread :: GetMutexPointer()$/;"	f	class:CMutexByPThread	signature:()
GetMutexPointer	CMutexBySharedPThread.cpp	/^pthread_mutex_t *CMutexBySharedPThread::GetMutexPointer()$/;"	f	class:CMutexBySharedPThread	signature:()
GetRefCount	CSharedMemory.cpp	/^int CSharedMemory :: GetRefCount()$/;"	f	class:CSharedMemory	signature:()
GetSharedCond	CSharedCondVarManager.cpp	/^pthread_cond_t *CSharedCondVarManager::GetSharedCond(const char *pstrCondName)$/;"	f	class:CSharedCondVarManager	signature:(const char *pstrCondName)
ICommunicationObject	ICommunicationObject.cpp	/^ICommunicationObject:: ICommunicationObject()$/;"	f	class:ICommunicationObject	signature:()
ICommunicationObject::ICommunicationObject	ICommunicationObject.cpp	/^ICommunicationObject:: ICommunicationObject()$/;"	f	class:ICommunicationObject	signature:()
ICommunicationObject::~ICommunicationObject	ICommunicationObject.cpp	/^ICommunicationObject:: ~ICommunicationObject()$/;"	f	class:ICommunicationObject	signature:()
ID_FOR_KEY	CSharedMemory.cpp	34;"	d	file:
IMutexUsingPThread	IMutexUsingPThread.cpp	/^IMutexUsingPThread :: IMutexUsingPThread()$/;"	f	class:IMutexUsingPThread	signature:()
IMutexUsingPThread::IMutexUsingPThread	IMutexUsingPThread.cpp	/^IMutexUsingPThread :: IMutexUsingPThread()$/;"	f	class:IMutexUsingPThread	signature:()
IMutexUsingPThread::~IMutexUsingPThread	IMutexUsingPThread.cpp	/^IMutexUsingPThread :: ~IMutexUsingPThread()$/;"	f	class:IMutexUsingPThread	signature:()
ISharedObjectPool	ISharedObjectPool.cpp	/^ISharedObjectPool::ISharedObjectPool()$/;"	f	class:ISharedObjectPool	signature:()
ISharedObjectPool::Destroy	ISharedObjectPool.cpp	/^CStatus ISharedObjectPool::Destroy()$/;"	f	class:ISharedObjectPool	signature:()
ISharedObjectPool::GetASharedObject	ISharedObjectPool.cpp	/^void *ISharedObjectPool :: GetASharedObject(const char *pstrSharedObjectName)$/;"	f	class:ISharedObjectPool	signature:(const char *pstrSharedObjectName)
ISharedObjectPool::ISharedObjectPool	ISharedObjectPool.cpp	/^ISharedObjectPool::ISharedObjectPool()$/;"	f	class:ISharedObjectPool	signature:()
ISharedObjectPool::Initialize	ISharedObjectPool.cpp	/^CStatus ISharedObjectPool ::Initialize()$/;"	f	class:ISharedObjectPool	signature:()
ISharedObjectPool::ReleaseASharedObject	ISharedObjectPool.cpp	/^CStatus ISharedObjectPool::ReleaseASharedObject(const char *pstrSharedObjectName)$/;"	f	class:ISharedObjectPool	signature:(const char *pstrSharedObjectName)
ISharedObjectPool::~ISharedObjectPool	ISharedObjectPool.cpp	/^ISharedObjectPool :: ~ISharedObjectPool()$/;"	f	class:ISharedObjectPool	signature:()
IUsrBizForExecObj	IUsrBizForExecObj.cpp	/^IUsrBizForExecObj::IUsrBizForExecObj()$/;"	f	class:IUsrBizForExecObj	signature:()
IUsrBizForExecObj::IUsrBizForExecObj	IUsrBizForExecObj.cpp	/^IUsrBizForExecObj::IUsrBizForExecObj()$/;"	f	class:IUsrBizForExecObj	signature:()
IUsrBizForExecObj::~IUsrBizForExecObj	IUsrBizForExecObj.cpp	/^IUsrBizForExecObj::~IUsrBizForExecObj()$/;"	f	class:IUsrBizForExecObj	signature:()
Initialize	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CStatus CMsgLoopMgrUsingUsrDefQueue::Initialize()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
Initialize	CMutexByPThread.cpp	/^CStatus CMutexByPThread :: Initialize()$/;"	f	class:CMutexByPThread	signature:()
Initialize	CMutexByRecordLocking.cpp	/^CStatus CMutexByRecordLocking :: Initialize()$/;"	f	class:CMutexByRecordLocking	signature:()
Initialize	CMutexByRecordLockingAndPThread.cpp	/^CStatus CMutexByRecordLockingAndPThread :: Initialize()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
Initialize	CMutexBySharedPThread.cpp	/^CStatus CMutexBySharedPThread::Initialize()$/;"	f	class:CMutexBySharedPThread	signature:()
Initialize	ISharedObjectPool.cpp	/^CStatus ISharedObjectPool ::Initialize()$/;"	f	class:ISharedObjectPool	signature:()
InitializeASharedObject	CSharedMutexPool.cpp	/^CStatus CSharedMutexPool::InitializeASharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedMutexPool	signature:(SSharedObjectHead *pObject)
InitializeMemberVars	CStatus.cpp	/^void CStatus::InitializeMemberVars(int iReturnCode, int iErrorCode, const char * pErrorMsg) $/;"	f	class:CStatus	signature:(int iReturnCode, int iErrorCode, const char * pErrorMsg)
InitializeSharedObject	CSharedConditionVariablePool.cpp	/^CStatus CSharedConditionVariablePool::InitializeSharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedConditionVariablePool	signature:(SSharedObjectHead *pObject)
InitializeSharedObject	CSharedEventPool.cpp	/^CStatus CSharedEventPool::InitializeSharedObject(SSharedObjectHead *pObject)$/;"	f	class:CSharedEventPool	signature:(SSharedObjectHead *pObject)
IsEmpty	CUsrDefMsgQueue.cpp	/^bool CUsrDefMsgQueue::IsEmpty()$/;"	f	class:CUsrDefMsgQueue	signature:()
IsFull	CUsrDefMsgQueue.cpp	/^bool CUsrDefMsgQueue::IsFull()$/;"	f	class:CUsrDefMsgQueue	signature:()
IsInitialSuccess	CThreadInitFinishedNotifier.cpp	/^bool CThreadInitFinishedNotifier::IsInitialSuccess()$/;"	f	class:CThreadInitFinishedNotifier	signature:()
IsSuccess	CStatus.cpp	/^bool CStatus::IsSuccess()$/;"	f	class:CStatus	signature:()
LENGTH_OF_PATH	CProcess.cpp	36;"	d	file:
LENGTH_OF_PROCESSID	CProcess.cpp	35;"	d	file:
Lock	CMutex.cpp	/^CStatus CMutex::Lock()$/;"	f	class:CMutex	signature:()
Lock	CMutexByPThread.cpp	/^CStatus CMutexByPThread :: Lock()$/;"	f	class:CMutexByPThread	signature:()
Lock	CMutexByRecordLocking.cpp	/^CStatus CMutexByRecordLocking :: Lock()$/;"	f	class:CMutexByRecordLocking	signature:()
Lock	CMutexByRecordLockingAndPThread.cpp	/^CStatus CMutexByRecordLockingAndPThread :: Lock()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
Lock	CMutexBySharedPThread.cpp	/^CStatus CMutexBySharedPThread::Lock()$/;"	f	class:CMutexBySharedPThread	signature:()
MAX_LENGTH_OF_PATH	CUsrBizForProcess.cpp	25;"	d	file:
MUTEX_FOR_SHARED_CONDITION_VARIABLE_ALLOCATOR	CSharedCondVarManager.cpp	10;"	d	file:
MUTEX_FOR_SHARED_EVENT_ALLOCATOR	CSharedEventManager.cpp	10;"	d	file:
MUTEX_FOR_SHARED_MUTEX_ALLOCATOR	CSharedMutexPoolManager.cpp	34;"	d	file:
NotifyInitialFinished	CThreadInitFinishedNotifier.cpp	/^CStatus CThreadInitFinishedNotifier:: NotifyInitialFinished(bool bIsSuccess)$/;"	f	class:CThreadInitFinishedNotifier	signature:(bool bIsSuccess)
Pop	CUsrDefMsgQueue.cpp	/^CMessage * CUsrDefMsgQueue::Pop()$/;"	f	class:CUsrDefMsgQueue	signature:()
PostMessage	CCommunicationByMsgQueue.cpp	/^CStatus CCommunicationByMsgQueue:: PostMessage(CMessage * pMsg)$/;"	f	class:CCommunicationByMsgQueue	signature:(CMessage * pMsg)
Push	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::Push(CMessage * pMsg)$/;"	f	class:CUsrDefMsgQueue	signature:(CMessage * pMsg)
PushMessage	CUsrDefMsgQueue.cpp	/^CStatus CUsrDefMsgQueue::PushMessage(CMessage * pMsg)$/;"	f	class:CUsrDefMsgQueue	signature:(CMessage * pMsg)
QUEUE_AUTO_INCREMENT_SIZE	CUsrDefMsgQueue.cpp	24;"	d	file:
QUEUE_INITIAL_SIZE	CUsrDefMsgQueue.cpp	25;"	d	file:
Register	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer:: Register(const char * strCommObjName, ICommunicationObject * pCommObj)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName, ICommunicationObject * pCommObj)
Register	CMsgLoopManager.cpp	/^CStatus CMsgLoopManager::Register(unsigned int iMsgTypeID, CallBackFunctionOfMsgObserver pFunction)$/;"	f	class:CMsgLoopManager	signature:(unsigned int iMsgTypeID, CallBackFunctionOfMsgObserver pFunction)
Release	CSharedCondVarManager.cpp	/^CStaus CSharedCondVarManager::Release(const char *pstrCondName)$/;"	f	class:CSharedCondVarManager	signature:(const char *pstrCondName)
Release	CSharedEventManager.cpp	/^CStatus CSharedEventManager::Release(const char *pstrEventName)$/;"	f	class:CSharedEventManager	signature:(const char *pstrEventName)
Release	CSharedMutexPoolManager.cpp	/^CStatus CSharedMutexPoolManager::Release(const char *pstrMutexName)$/;"	f	class:CSharedMutexPoolManager	signature:(const char *pstrMutexName)
ReleaseAEventInfo	CSharedEventManager.cpp	/^CStatus CSharedEventManager::ReleaseAEventInfo(const char *pstrEventName)$/;"	f	class:CSharedEventManager	signature:(const char *pstrEventName)
ReleaseASharedMutex	CSharedMutexPoolManager.cpp	/^CStatus CSharedMutexPoolManager::ReleaseASharedMutex(const char *pstrMutexName)$/;"	f	class:CSharedMutexPoolManager	signature:(const char *pstrMutexName)
ReleaseASharedObject	ISharedObjectPool.cpp	/^CStatus ISharedObjectPool::ReleaseASharedObject(const char *pstrSharedObjectName)$/;"	f	class:ISharedObjectPool	signature:(const char *pstrSharedObjectName)
ReleaseCommunicationObject	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer::ReleaseCommunicationObject(const char * strCommObjName)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName)
ReleaseSharedCond	CSharedCondVarManager.cpp	/^CStaus CSharedCondVarManager::ReleaseSharedCond(const char *pstrCondName)$/;"	f	class:CSharedCondVarManager	signature:(const char *pstrCondName)
Run	CProcess.cpp	/^CStatus CProcess :: Run(void * pstrCmdLine)$/;"	f	class:CProcess	signature:(void * pstrCmdLine)
Run	CThread.cpp	/^CStatus CThread::Run(void * pContext)$/;"	f	class:CThread	signature:(void * pContext)
Run	CThreadUsingMsgLoop.cpp	/^CStatus CThreadUsingMsgLoop::Run(void * pContext)$/;"	f	class:CThreadUsingMsgLoop	signature:(void * pContext)
Run	CUseMsgLoopWithoutThread.cpp	/^CStatus CUseMsgLoopWithoutThread::Run(void * pContext)$/;"	f	class:CUseMsgLoopWithoutThread	signature:(void * pContext)
RunBizOfChildProcess	CProcess.cpp	/^void CProcess :: RunBizOfChildProcess(void * pstrCmdLine)$/;"	f	class:CProcess	signature:(void * pstrCmdLine)
RunClientBusiness	CUsrBizForProcess.cpp	/^CStatus CUsrBizForProcess :: RunClientBusiness(void * pCmdLine)$/;"	f	class:CUsrBizForProcess	signature:(void * pCmdLine)
RunClientBusiness	CUsrBizUsingMsgLoop.cpp	/^CStatus CUsrBizUsingMsgLoop::RunClientBusiness(void *pContext)$/;"	f	class:CUsrBizUsingMsgLoop	signature:(void *pContext)
SHARED_SPACE_FOR_SHARED_CONDITION_VARIABLE_ALLOCATOR	CSharedConditionVariablePool.cpp	12;"	d	file:
SHARED_SPACE_FOR_SHARED_EVENT_ALLOCATOR	CSharedEventPool.cpp	3;"	d	file:
SHARED_SPACE_FOR_SHARED_MUTEX_ALLOCATOR	CSharedMutexPool.cpp	27;"	d	file:
SendMessage	CCommunicationNameServer.cpp	/^CStatus CCommunicationNameServer::SendMessage(const char * strCommObjName, CMessage * pMessage)$/;"	f	class:CCommunicationNameServer	signature:(const char * strCommObjName, CMessage * pMessage)
Set	CEvent.cpp	/^CStatus CEvent::Set()$/;"	f	class:CEvent	signature:()
SetWorkDirectory	CUsrBizForProcess.cpp	/^CStatus CUsrBizForProcess :: SetWorkDirectory(char * pstrArgv0)$/;"	f	class:CUsrBizForProcess	signature:(char * pstrArgv0)
StartFunctionOfThread	CThread.cpp	/^void * CThread::StartFunctionOfThread(void * pThis)$/;"	f	class:CThread	signature:(void * pThis)
Uninitialize	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CStatus CMsgLoopMgrUsingUsrDefQueue:: Uninitialize()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
Uninitialize	CMutexByPThread.cpp	/^CStatus CMutexByPThread :: Uninitialize()$/;"	f	class:CMutexByPThread	signature:()
Uninitialize	CMutexByRecordLocking.cpp	/^CStatus CMutexByRecordLocking :: Uninitialize()$/;"	f	class:CMutexByRecordLocking	signature:()
Uninitialize	CMutexByRecordLockingAndPThread.cpp	/^CStatus CMutexByRecordLockingAndPThread :: Uninitialize()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
Uninitialize	CMutexBySharedPThread.cpp	/^CStatus CMutexBySharedPThread::Uninitialize()$/;"	f	class:CMutexBySharedPThread	signature:()
Unlock	CMutex.cpp	/^CStatus CMutex::Unlock()$/;"	f	class:CMutex	signature:()
Unlock	CMutexByPThread.cpp	/^CStatus CMutexByPThread :: Unlock()$/;"	f	class:CMutexByPThread	signature:()
Unlock	CMutexByRecordLocking.cpp	/^CStatus CMutexByRecordLocking :: Unlock()$/;"	f	class:CMutexByRecordLocking	signature:()
Unlock	CMutexByRecordLockingAndPThread.cpp	/^CStatus CMutexByRecordLockingAndPThread :: Unlock()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
Unlock	CMutexBySharedPThread.cpp	/^CStatus CMutexBySharedPThread::Unlock()$/;"	f	class:CMutexBySharedPThread	signature:()
UseAsRecordCondVar	CEvent.cpp	/^CStatus CEvent::UseAsRecordCondVar(bool b)$/;"	f	class:CEvent	signature:(bool b)
Wait	CEvent.cpp	/^CStatus CEvent::Wait()$/;"	f	class:CEvent	signature:()
WaitForDeath	CProcess.cpp	/^CStatus CProcess :: WaitForDeath()$/;"	f	class:CProcess	signature:()
WaitForDeath	CThread.cpp	/^CStatus CThread::WaitForDeath()$/;"	f	class:CThread	signature:()
WaitForMessage	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMessage * CMsgLoopMgrUsingUsrDefQueue:: WaitForMessage()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
m_MutexForCreatingInstance	CCommunicationNameServer.cpp	/^CMutex CCommunicationNameServer::m_MutexForCreatingInstance;$/;"	m	class:CCommunicationNameServer	file:
m_pNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer * CCommunicationNameServer::m_pNameServer = 0;$/;"	m	class:CCommunicationNameServer	file:
m_pShMutexPoolMgr	CSharedMutexPoolManager.cpp	/^CSharedMutexPoolManager *CSharedMutexPoolManager :: m_pShMutexPoolMgr = 0;$/;"	m	class:CSharedMutexPoolManager	file:
main	test.cpp	/^int main()$/;"	f	signature:()
main	test/main.cpp	/^int main()$/;"	f	signature:()
~CCommunicationByMsgQueue	CCommunicationByMsgQueue.cpp	/^CCommunicationByMsgQueue:: ~CCommunicationByMsgQueue()$/;"	f	class:CCommunicationByMsgQueue	signature:()
~CCommunicationNameServer	CCommunicationNameServer.cpp	/^CCommunicationNameServer::~CCommunicationNameServer()$/;"	f	class:CCommunicationNameServer	signature:()
~CEnterCriticalSection	CEnterCriticalSection.cpp	/^CEnterCriticalSection::~CEnterCriticalSection()$/;"	f	class:CEnterCriticalSection	signature:()
~CEvent	CEvent.cpp	/^CEvent::~CEvent()$/;"	f	class:CEvent	signature:()
~CExecutiveObject	CExecutiveObject.cpp	/^CExecutiveObject::~CExecutiveObject()$/;"	f	class:CExecutiveObject	signature:()
~CMessage	CMessage.cpp	/^CMessage:: ~CMessage()$/;"	f	class:CMessage	signature:()
~CMsgLoopManager	CMsgLoopManager.cpp	/^CMsgLoopManager:: ~CMsgLoopManager()$/;"	f	class:CMsgLoopManager	signature:()
~CMsgLoopMgrUsingUsrDefQueue	CMsgLoopMgrUsingUsrDefQueue.cpp	/^CMsgLoopMgrUsingUsrDefQueue::~CMsgLoopMgrUsingUsrDefQueue()$/;"	f	class:CMsgLoopMgrUsingUsrDefQueue	signature:()
~CMsgObserver	CMsgObserver.cpp	/^CMsgObserver:: ~CMsgObserver()$/;"	f	class:CMsgObserver	signature:()
~CMutex	CMutex.cpp	/^CMutex::~CMutex()$/;"	f	class:CMutex	signature:()
~CMutexByPThread	CMutexByPThread.cpp	/^CMutexByPThread :: ~CMutexByPThread()$/;"	f	class:CMutexByPThread	signature:()
~CMutexByRecordLocking	CMutexByRecordLocking.cpp	/^CMutexByRecordLocking :: ~CMutexByRecordLocking()$/;"	f	class:CMutexByRecordLocking	signature:()
~CMutexByRecordLockingAndPThread	CMutexByRecordLockingAndPThread.cpp	/^CMutexByRecordLockingAndPThread :: ~CMutexByRecordLockingAndPThread()$/;"	f	class:CMutexByRecordLockingAndPThread	signature:()
~CMutexBySharedPThread	CMutexBySharedPThread.cpp	/^CMutexBySharedPThread::~CMutexBySharedPThread()$/;"	f	class:CMutexBySharedPThread	signature:()
~CMutexInterface	CMutexInterface.cpp	/^CMutexInterface::~CMutexInterface()$/;"	f	class:CMutexInterface	signature:()
~CProcess	CProcess.cpp	/^CProcess::~CProcess()$/;"	f	class:CProcess	signature:()
~CSharedCondVarManager	CSharedCondVarManager.cpp	/^CSharedCondVarManager::~CSharedCondVarManager()$/;"	f	class:CSharedCondVarManager	signature:()
~CSharedConditionVariablePool	CSharedConditionVariablePool.cpp	/^CSharedConditionVariablePool::~CSharedConditionVariablePool()$/;"	f	class:CSharedConditionVariablePool	signature:()
~CSharedEventManager	CSharedEventManager.cpp	/^CSharedEventManager::~CSharedEventManager()$/;"	f	class:CSharedEventManager	signature:()
~CSharedEventPool	CSharedEventPool.cpp	/^CSharedEventPool::~CSharedEventPool()$/;"	f	class:CSharedEventPool	signature:()
~CSharedMemory	CSharedMemory.cpp	/^CSharedMemory :: ~CSharedMemory()$/;"	f	class:CSharedMemory	signature:()
~CSharedMutexPool	CSharedMutexPool.cpp	/^CSharedMutexPool::~CSharedMutexPool()$/;"	f	class:CSharedMutexPool	signature:()
~CSharedMutexPoolManager	CSharedMutexPoolManager.cpp	/^CSharedMutexPoolManager::~CSharedMutexPoolManager()$/;"	f	class:CSharedMutexPoolManager	signature:()
~CStatus	CStatus.cpp	/^CStatus::~CStatus()$/;"	f	class:CStatus	signature:()
~CThread	CThread.cpp	/^CThread::~CThread()$/;"	f	class:CThread	signature:()
~CThreadInitFinishedNotifier	CThreadInitFinishedNotifier.cpp	/^CThreadInitFinishedNotifier::~CThreadInitFinishedNotifier()$/;"	f	class:CThreadInitFinishedNotifier	signature:()
~CThreadUsingMsgLoop	CThreadUsingMsgLoop.cpp	/^CThreadUsingMsgLoop:: ~CThreadUsingMsgLoop()$/;"	f	class:CThreadUsingMsgLoop	signature:()
~CUseMsgLoopWithoutThread	CUseMsgLoopWithoutThread.cpp	/^CUseMsgLoopWithoutThread::~CUseMsgLoopWithoutThread()$/;"	f	class:CUseMsgLoopWithoutThread	signature:()
~CUsrBizForProcess	CUsrBizForProcess.cpp	/^CUsrBizForProcess :: ~CUsrBizForProcess()$/;"	f	class:CUsrBizForProcess	signature:()
~CUsrBizUsingMsgLoop	CUsrBizUsingMsgLoop.cpp	/^CUsrBizUsingMsgLoop:: ~CUsrBizUsingMsgLoop()$/;"	f	class:CUsrBizUsingMsgLoop	signature:()
~CUsrDefMsgQueue	CUsrDefMsgQueue.cpp	/^CUsrDefMsgQueue::~CUsrDefMsgQueue()$/;"	f	class:CUsrDefMsgQueue	signature:()
~ICommunicationObject	ICommunicationObject.cpp	/^ICommunicationObject:: ~ICommunicationObject()$/;"	f	class:ICommunicationObject	signature:()
~IMutexUsingPThread	IMutexUsingPThread.cpp	/^IMutexUsingPThread :: ~IMutexUsingPThread()$/;"	f	class:IMutexUsingPThread	signature:()
~ISharedObjectPool	ISharedObjectPool.cpp	/^ISharedObjectPool :: ~ISharedObjectPool()$/;"	f	class:ISharedObjectPool	signature:()
~IUsrBizForExecObj	IUsrBizForExecObj.cpp	/^IUsrBizForExecObj::~IUsrBizForExecObj()$/;"	f	class:IUsrBizForExecObj	signature:()
